//##############################################################################
//##############################################################################
// Beschreibung: Benutzeroberfläche für die Verwaltung von Sachmerkmalleisten
//##############################################################################
//##############################################################################

|
   m_oOwner:P1,
   m_cFormRefKey:P2,
   m_uDummy:P3,
   m_aParams:P4,
   m_cPositionSaveID, m_cVariantEditPositionSaveID, m_cFormID, m_cBrowserID,
   m_cAssignmentBrowserID,
   m_oDM,

   m_nMainTableWorkarea,
   m_oMainTable,
   m_cMainTableAlias,
   m_bMainTableExpicitPost,
   m_bFillingMemTable,

   m_nAssignmentTableWorkarea,
   m_oAssignmentTable,
   m_cAssignmentTableAlias,
   m_cAssignmentTableIndex,

   m_cSMLFieldName,

   m_bSMLHasOrphanedAssignments,

   // @VDB@ der nachfolgende Teil wird automatisch gepflegt
   oForm, A_Cancel, A_Copy, A_Delete, A_DeleteOrphanedAssignments,
   A_DifferenceAnalysis, A_Edit, A_ExportSML, A_First, A_ImportSML, A_Last,
   A_New, A_Next, A_Previous, A_RefreshUsage, A_Save, actions, bar_Main,
   bar_Usage, bardock_Top, bardock_Usage, barmngr_Main, bbtn_Cancel, bbtn_Copy,
   bbtn_Delete, bbtn_DeleteOrphanedAssignments, bbtn_DifferenceAnalysis,
   bbtn_Edit, bbtn_Export, bbtn_First, bbtn_Import, bbtn_Last, bbtn_New,
   bbtn_Next, bbtn_Previous, bbtn_RefreshUsage, bbtn_Save, chk_Active,
   chk_Visible, cmb_Workarea, ds_AssignmentTable, ds_MainTable, edt_Description,
   edt_Key, edt_Label, edt_Search, grd_AssignmentBrowser, grd_MainBrowser,
   ipnl_SMLView, ipnl_Title, ipnl_Usage, lbl_Description, lbl_Key, lbl_Label,
   lbl_NoPropertiesHint, lbl_UsageInfo, lbl_Workarea, pc_Detail, pnl_Detail,
   pnl_Grid, pnl_SMLSettings, pnl_Usage, ts_Data, ts_Usage
   // @VDE@ der vorangehende Teil wird automatisch gepflegt
   , pnl_SMLView
|

//##############################################################################
//##############################################################################
// Konstanten
//##############################################################################
//##############################################################################

m_cFormID                    := '@SMLADMIN',
m_cPositionSaveID            := '@SMLADMIN_POS',
m_cVariantEditPositionSaveID := '@SMLEDIT_POS',
m_cBrowserID                 := '@SMLBRO',
m_cAssignmentBrowserID       := '@SMLUSAGE',
m_nMainTableWorkarea         := waSmlSTM,
m_cMainTableAlias            := 'SMLSTM',
m_nAssignmentTableWorkarea   := waSmlZUO,
m_cAssignmentTableAlias      := 'SMLZUO',
m_cAssignmentTableIndex      := 'SML_ID',
m_cSMLFieldName              := 'SL_MEMO',


//##############################################################################
//##############################################################################
// Funktionen
//##############################################################################
//##############################################################################

//******************************************************************************
// Zentrale Steuerung des "Enabled-Zustand" aller Actions
//******************************************************************************
function ActionsEnabled()
| bInEditMode, bIsEmpty, bNotInUse, bIsArticleUsageWA |
   bInEditMode := EditModes(m_oMainTable),
   bIsEmpty    := Bof(m_oMainTable) and Eof(m_oMainTable),
   bNotInUse   := Bof(m_oAssignmentTable) and Eof(m_oAssignmentTable),
   bIsArticleUsageWA := m_oMainTable:VERWEND_WA = waDab010,

   // Buttons in der Toolbar En-/Disablen
   A_ImportSML.Enabled := not bInEditMode and not bIsEmpty and bIsArticleUsageWA,
   A_ExportSML.Enabled := not bInEditMode and not bIsEmpty and bIsArticleUsageWA,
   A_Copy.Enabled      := not bInEditMode and not bIsEmpty,
   A_DifferenceAnalysis.Enabled := not bInEditMode and not bIsEmpty,
   A_Edit.Enabled      := not bIsEmpty,
   A_Save.Enabled      := bInEditMode,
   A_Cancel.Enabled    := bInEditMode,
   A_New.Enabled       := not bInEditMode,
   A_Delete.Enabled    := not bInEditMode and not bIsEmpty and bNotInUse,
   A_Previous.Enabled  := not bInEditMode and not Bof(m_oMainTable),
   A_Next.Enabled      := not bInEditMode and not Eof(m_oMainTable),
   A_First.Enabled     := not bInEditMode and not Bof(m_oMainTable),
   A_Last.Enabled      := not bInEditMode and not Eof(m_oMainTable),

   // Buttons in der Toolbar auf Tabkarte "Verwendung" En-/Disablen
   A_DeleteOrphanedAssignments.Enabled := m_bSMLHasOrphanedAssignments,

   // GUI-Controls
   edt_Label.Enabled       := not bIsEmpty,
   edt_Key.Enabled         := not bIsEmpty,
   edt_Description.Enabled := not bIsEmpty,
   cmb_Workarea.Enabled    := not bIsEmpty and bNotInUse,
   chk_Active.Enabled      := not bIsEmpty,
   chk_Visible.Enabled     := not bIsEmpty,

   if bNotInUse then
      lbl_UsageInfo.Caption := 'Sachmerkmalleiste wird nicht verwendet',
   else
      lbl_UsageInfo.Caption := 'Sachmerkmalleiste wird verwendet',
   endif,
end,

//******************************************************************************
// Name der aktuellen Sachmerkmalleiste
// @Result: string
//******************************************************************************
function SML_GetLabel()
   Result := m_oMainTable:BEZ,
end,

//******************************************************************************
// Prüfen ob eine Sachmerkmalleisten-Nummer eindeutig ist
// @Result: boolean
//******************************************************************************
function SML_IsSMLKeyUnique(cSMLKey:C, nExcludeSMLID:N)
| oSMLSTM |

   oSMLSTM := BeOpen(waSMLSTM, 'NUMMER'),
   startseq
      oSMLSTM.CbFilter   := 'ID <> ' + Str(nExcludeSMLID),
      oSMLSTM.CbFiltered := True,
      Result             := not oSMLSTM.CbFindKey({cSMLKey}),
   always
      BeClose(oSMLSTM),
   stopseq,
end,

//******************************************************************************
// Prüft ob eine Sachmerkmalleisten-Zuordnung verwaist ist
// @Result: boolean
//******************************************************************************
function SML_IsAssignmentOrphaned(nWorkarea:N, nID:N, cArticleNo:C)
   if nWorkarea = waDab010 then
      Result := Lookup(waDab010, 'DAB011', {{cArticleNo}}, 'Eof()', True),
   else
      Result := Empty(SML_GetMasterRecordKey(nWorkarea, nID)),
   endif,
end,

//******************************************************************************
// Verwaiste Zuordnungen löschen
// @Result: integer - Anzahl der gelöschten Zuordnungen
//******************************************************************************
function SML_DeleteOrphanedAssignments(oDM:O, nSMLID:N)
| oAssignmentTable |

   // Transaktion muss aktiv sein!
   SetErrorIf(not oDM.CbTransaction_Active(),
              'Datenmodul muss sich in einer aktiven Transaktion befinden!'),

   Result           := 0,
   oAssignmentTable := DbGetTable(oDM, waSMLZUO, 'SMLZUO_DELETE_ORPHANS'),

   // Ggf. auf die Zuordnungen einer bestimmten Sachmerkmalleisten beschränken
   if nSMLID > 0 then
      oAssignmentTable.IndexName := 'SML_ID',
      oAssignmentTable.CbSetRangeEx({nSMLID}),
   endif,

   oAssignmentTable.CbFirst(),
   while not oAssignmentTable.CbEof do
      if SML_IsAssignmentOrphaned(oAssignmentTable:VERWEND_WA,
                                  oAssignmentTable:VERWEND_ID,
                                  oAssignmentTable:ARTNR) then
         SML_DeleteAttributesTable(oDM, oAssignmentTable:ID),
         MyDelete(oAssignmentTable),
         Result++,
      else
         oAssignmentTable.CbNext(),
      endif,
   end,
   oAssignmentTable.CbFirst(),
end,

//******************************************************************************
// SLMemo-String aus aktuellen Datensatz der Haupttabelle holen
// @Result: string
//******************************************************************************
function GetSLMemo()
   Result := AsString(m_cSMLFieldName, m_oMainTable),
end,

//******************************************************************************
// TVarCalcPanel aktualisieren
// @Result: null
//******************************************************************************
function RefreshVarCalcPanel()
| bNoContent, cSLMemo |
   cSLMemo                         := GetSLMemo(),
   bNoContent                      := Empty(AllTrim(cSLMemo)),
   lbl_NoPropertiesHint.Visible    := bNoContent,
   pnl_SMLView.Visible             := not bNoContent,
   pnl_SMLView.FormVarCalc.PL_Memo := cSLMemo,
end,

//******************************************************************************
// Flag m_bSMLHasOrphanedAssignments aktualisieren
// @Result: null
//******************************************************************************
function RefreshSMLHasOrphanedAssignmentsFlag()
| oAssignmentTable |

   oAssignmentTable := BeOpen(waSMLZUO, 'SML_ID', True),
   startseq
      oAssignmentTable.CbSetRangeEx({m_oMainTable:ID}),
      while not oAssignmentTable.CbEof do
         m_bSMLHasOrphanedAssignments := SML_IsAssignmentOrphaned(oAssignmentTable:VERWEND_WA,
                                                                  oAssignmentTable:VERWEND_ID,
                                                                  oAssignmentTable:ARTNR),
         if m_bSMLHasOrphanedAssignments then
            break,
         endif,
         oAssignmentTable.CbNext(),
      end,
   always
      BeClose(oAssignmentTable),
   stopseq,
end,

//******************************************************************************
// Zuordnungs-/Verwendungs-Browser aktualisieren
// @Result: null
//******************************************************************************
function RefreshAssignmentBrowser()
   DbDisableControls(m_oAssignmentTable),
   startseq
      DbScope({m_oMainTable:ID}, {m_oMainTable:ID}, m_oAssignmentTable),

      // Prüfen ob verwaiste Zuordnungen existieren
      // und in m_bSMLHasOrphanedAssignments zwischenspeichern
      RefreshSMLHasOrphanedAssignmentsFlag(),
      m_oAssignmentTable.CbRefresh(),
   always
      DbEnableControls(m_oAssignmentTable),
   stopseq,
end,

//******************************************************************************
// SLMemo-String speichern
// @Result: boolean
//******************************************************************************
function SaveSLMemo(cSLMemo)
| oField |
   Result := False,
   oField := DbField(m_cSMLFieldName, m_oMainTable),
   if oField <> nil then
      Result := DbReplace(oField, cSLMemo),
      if Result then
         RefreshVarCalcPanel(),
      endif,
   endif,
end,

//******************************************************************************
// Übernimmt Merkmalseigenschaften aus der Merkmalsverwaltung für das übergebene
// Merkmal in die MemTable des Varianten-Dialogs.
// @Result: null
//******************************************************************************
function VariantEdit_ApplyAttributeInfo(oAttributesTable:O, nVIndex:N)
| oSmlMKM |                     
   SetErrorIf(not EditModes(oAttributesTable),
              'MemTable für Merkmale muss sich im Edit- oder Insert-Modus befinden!'),

   oSmlMKM := BeOpen(waSmlMKM, 'V_INDEX', False),
   startseq
      if DbSeek({nVIndex}, oSmlMKM) then
         oAttributesTable:VIndex     := oSmlMKM:V_INDEX,
         oAttributesTable:Caption    := oSmlMKM:BEZ,
         oAttributesTable:Print      := oSmlMKM:DRUCKEN,
         oAttributesTable:Type       := oSmlMKM:MERKM_TYP,
         oAttributesTable:Ctrl       := oSmlMKM:DATEN_TYP,
         oAttributesTable:AttribID   := oSmlMKM:MMT,
         oAttributesTable:InitValue  := oSmlMKM:VORGABE,
         // Feld FORMAT ist vom Typ Character(256) -> Trim() verwenden!
         oAttributesTable:Format     := Trim(oSmlMKM:FORMAT),
         oAttributesTable:Validation := oSmlMKM:CODEBLOCK,
         oAttributesTable:Width      := oSmlMKM:GROESSE,
      endif,
   always
      BeClose(oSmlMKM),
   stopseq,
end,

//******************************************************************************
// Callback für das OnDataChange-Event der Varianten-Dialog MemTable
// Event: OnDataChange
//
// @Result: null
//******************************************************************************
function VariantEdit_MemtableDataChange(Sender, oField)
| oTable, nVIndex |

   // Das OnDataChange-Event wird immer ausgelöst, wenn sich ein Wert in einem
   // Feld ändert -> Flag prüfen: Wenn gerade die Merkmalseigenschaften aus der
   // Merkmalsverwaltung übernommen werden nicht auf das OnDataChange reagieren!
   if m_bFillingMemTable then
      Exit,
   endif,

   oTable := Sender.Dataset,
   if EditModes(oTable) then
      if not Empty(oField) and oField.FieldName == 'VIndex' then
         nVIndex            := AsNumber('VIndex', oTable),
         m_bFillingMemTable := True,
         startseq
            VariantEdit_ApplyAttributeInfo(oTable, nVIndex),
         always
            m_bFillingMemTable := False,
         stopseq,
      endif,
   endif,
end,

//******************************************************************************
// Variantendialog erzeugen und anzeigen
// @Result: boolean
//******************************************************************************
function ShowVariantEdit(bReadOnly)
| oVariantEdit, bShowError, oMemTable, oCustomDS |
   Result       := False,
   bShowError   := False,
   oVariantEdit := CreateObject('TBeCbFormVariantMaskEdit', 'VariantEdit'),
   startseq
      oVariantEdit.OrigCapt       := 'Merkmale bearbeiten',
      oVariantEdit.PositionSaveID := m_cVariantEditPositionSaveID,
      oVariantEdit.CbSLMemo       := GetSLMemo(),
      oVariantEdit.CbReadOnly     := bReadOnly,

      oCustomDS := CreateObject('TDataSourceEx'),
      startseq
         oMemTable := FindObject(oVariantEdit, 'MemTable'),
         if not Empty(oMemTable) then
            m_bFillingMemTable := False,
            AssignEvent(oCustomDS, 'OnDataChange', 'VariantEdit_MemtableDataChange'),
            oCustomDS.Dataset := oMemTable,
         endif,

         ShowModal(oVariantEdit),
         if oVariantEdit.CbModified then
            // Falls Änderungen vorhanden -> in Feld übernehmen
            Result     := SaveSLMemo(oVariantEdit.CbSLMemo),
            bShowError := not Result,
         endif,
      always
         DestroyObject(oCustomDS),
      stopseq,
   always
      DestroyObject(oVariantEdit),
   stopseq,

   // Wenn die Änderungen nicht in das Feld übernommen werden konnten
   // -> Fehlermeldung anzeigen
   if bShowError then
      MessageDlg('Merkmale der Sachmerkmalleiste <' + SML_GetLabel() +
                 '> konnten nicht gespeichert werden!', mtError),
   endif,
end,

//******************************************************************************
// Sachmerkmalleiste kopieren
// @Result: boolean
//******************************************************************************
function SML_Copy()
| cLabel, cDescription, nWorkarea, cSLMemo, bActive, bVisible |
   Result := False,

   cLabel       := 'Kopie von ' + m_oMainTable:BEZ,
   cDescription := m_oMainTable:MEMO,
   nWorkarea    := m_oMainTable:VERWEND_WA,
   cSLMemo      := m_oMainTable:SL_MEMO,
   bActive      := False,
   bVisible     := m_oMainTable:SICHT_SUCH,

   if DbAppend(m_oMainTable) then
      Result                  := True,
      m_oMainTable:BEZ        := cLabel,
      m_oMainTable:MEMO       := cDescription,
      m_oMainTable:VERWEND_WA := nWorkarea,
      m_oMainTable:SL_MEMO    := cSLMemo,
      m_oMainTable:AKTIV      := bActive,
      m_oMainTable:SICHT_SUCH := bVisible,
   endif,
end,

//******************************************************************************
// Einstellungen laden
// @Result: null
//******************************************************************************
function LoadSettings()
| cSettings |
   startseq
      cSettings := GetBeParam('SMLADMIN'),
      GU_TBePanel_SetSplitterData(pnl_Grid, StrToArr(cSettings)),
   onerror
      // Kein fataler Fehler -> Exceptions ignorieren
   stopseq,
end,

//******************************************************************************
// Einstellungen speichern
// @Result: null
//******************************************************************************
function SaveSettings()
   startseq
      SetBeParam('SMLADMIN', ArrToStr(GU_TBePanel_GetSplitterData(pnl_Grid))),
   onerror
      // Kein fataler Fehler -> Exceptions ignorieren
   stopseq,
end,


//##############################################################################
//##############################################################################
// Eventhandler
//##############################################################################
//##############################################################################

//******************************************************************************
// Event: Kann das Fenster geschlossen werden?
//******************************************************************************
function FormExCloseQuery( Sender, bCanClose )
   bCanClose := not EditModes(m_oMainTable),
end,

//******************************************************************************
// Event: Beim Ausführen der Volltextsuche
//******************************************************************************
function edt_SearchSearchExecute( Sender )
| cSearchText |
   cSearchText := AllTrim(Sender.Text),
   if Empty(cSearchText) then
      m_oMainTable.Filtered := False,
      m_oMainTable.Filter   := '',
      DbRefresh(m_oMainTable),
   else
      m_oMainTable.Filtered := False,
      m_oMainTable.Filter   := PrepareTextForFTSSearch(m_oMainTable.Workarea, 'SUCHE', cSearchText, 'SUCHE', False, True, 'AND', True),
      m_oMainTable.Filtered := True,
   endif
end,

//******************************************************************************
// Event: OnScroll_Update
//******************************************************************************
function ds_MainTableScroll_Update( Sender )
   // RefreshAssignmentBrowser() muss vor ActionsEnabled() ausgeführt werden,
   // weil die Zustände der Actions davon abhängig sind, ob die aktuelle
   // Sachmerkmalleiste in Verwendung ist.
   RefreshAssignmentBrowser(),
   ActionsEnabled(),
   RefreshVarCalcPanel(),
end,

//******************************************************************************
// Event: OnScroll_Update
//******************************************************************************
function ds_AssignmentTableScroll_Update( Sender )
   ActionsEnabled(),
end,

//******************************************************************************
// Event: Beim Schließen des Formulars
//******************************************************************************
function FormExClose(Sender, Action)
   Action := caFree,

   startseq
      SaveSettings(),
   onerror
      // Fehler beim Speichern der Einstellungen ignorieren, damit das Fenster
      // geschlossen werden kann!
   stopseq,
end,

//******************************************************************************
// Event: Beim Zerstören des Formulars
//******************************************************************************
function FormExDestroy( Sender )
   // MDI-Child aus Form-Ref-Array austragen
   GFU_MDIChild_Destroyed(oForm, m_cFormRefKey),
end,

//******************************************************************************
// Event: Beim Auslösen eines User Events
//******************************************************************************
function Form_OnUserDefinedEvent( Sender, cKey, uParams )
   case cKey
      // Auf Sachmerkmalleiste positionieren
      of 'POSITION' ::
         if ALen(uParams) > 0 then
            if (ValType(uParams[1]) <> 'N') or EditModes(m_oMainTable) then
               MessageDlg('Sachmerkmalleiste konnte nicht positioniert werden!', mtWarning),
            else
               DbSeek({uParams[1]}, m_oMainTable),
            endif,
         endif,
   endcase,
end,

//******************************************************************************
// Event: Vor dem Posten
//******************************************************************************
function MainTable_BeforePost( Sender )
   if m_bMainTableExpicitPost then
      m_bMainTableExpicitPost := False,
   else
      Abort(True),
   endif,
end,

//##############################################################################
//##############################################################################
// Actionhandler
//##############################################################################
//##############################################################################

//******************************************************************************
// Action: Verwaiste Zuordnungen löschen
//******************************************************************************
function A_DeleteOrphanedAssignmentsExecute( Sender )
| nDeletedAssignmentsCount |

   if Jn('Alle verwaisten Zuordnungen für Sachmerkmalleiste <' + SML_GetLabel() + '> löschen?', False) then
      m_oAssignmentTable.CbDisableControls(),
      startseq
         m_oDM.CbTransaction_Begin(),
         startseq
            nDeletedAssignmentsCount := SML_DeleteOrphanedAssignments(m_oDM, m_oMainTable:ID),
            m_oDM.CbTransaction_Commit(),
            RefreshSMLHasOrphanedAssignmentsFlag(),
            MessageDlg('Es wurde(n) ' + Str(nDeletedAssignmentsCount) + ' verwaiste Zuordnung(en) gelöscht'),
         always
            // Bei Rollback KEIN DbResetDM() damit der Scope der
            // Zuordnungstabelle erhalten bleibt!
            m_oDM.CbTransaction_TryRollback()
         stopseq,
         m_oAssignmentTable.CbRefresh(),
      always
         m_oAssignmentTable.CbEnableControls(),
      stopseq,
   endif,
end,

//******************************************************************************
// Action: Verwendung der Sachmerkmalleiste aktualisieren
//******************************************************************************
function A_RefreshUsageExecute( Sender )
   m_oAssignmentTable.CbRefresh(),
   RefreshSMLHasOrphanedAssignmentsFlag(),
   m_oAssignmentTable.CbRefresh(),
end,

//******************************************************************************
// Action: Abweichungsanalyse anzeigen
//******************************************************************************
function A_DifferenceAnalysisExecute( Sender )
   GFU_ShowModal_CustomInfo(
      nil,
      'Sachmerkmalleisten\Abweichungsanalyse\MerkmalAbweichungsanalyseDialog',
      {'SACHMERKMALLEISTE', m_oMainTable:ID}
   ),
end,

//******************************************************************************
// Action: Sachmerkmalleiste in Excel-Datei exportieren
//******************************************************************************
function A_ExportSMLExecute( Sender )
| oDialog, cExportFileName, cDefaultFileExtension, nOldCursor, bExport |

   bExport               := True,
   cDefaultFileExtension := '.xlsx',

   oDialog := SaveDlg('Sachmerkmalleiste exportieren', 'Excel-Dateien|*.xlsx'),
   startseq,
      oDialog.Active := True,
      if oDialog.DoSave then
         cExportFileName := oDialog.FileName,
         // Ggf. Standard Dateinamenserweiterung (*.xlsx) an Dateinamen anfügen
         if Right(oDialog.FileName, Len(cDefaultFileExtension)) <> cDefaultFileExtension then
            cExportFileName := cExportFileName + cDefaultFileExtension,
         endif,
         // Prüfen, ob die Datei bereits existiert und User ggf. benachrichtigen
         if File(cExportFileName) then
            bExport := JN('Die Datei <' + cExportFileName + '> existiert bereits.' + CRLF +
                          'Soll die Datei überschreiben werden?', False),
         endif,

         if bExport then
            // Export durchführen
            nOldCursor := SetCursor(crHourGlass),
            startseq
               Call('Sachmerkmalleisten\ImportExport\Export',
                    m_oMainTable:ID, cExportFileName),
            always
               SetCursor(nOldCursor),
            stopseq,
         endif,
      endif,
   always,
      DestroyObject(oDialog),
   stopseq,
end,

//******************************************************************************
// Action: Sachmerkmalleiste aus Excel-Datei importieren
//******************************************************************************
function A_ImportSMLExecute( Sender )
   GFU_ShowModal(m_oMainTable, 'Sachmerkmalleisten\ImportExport\ImportGUI')
end,

//******************************************************************************
// Action: Sachmerkmalleiste kopieren
//******************************************************************************
function A_CopyExecute( Sender )
   if SML_Copy() then
      RefreshVarCalcPanel(),
      MyFocusControl(oForm, edt_Label),
   else
      MessageDlg('Sachmerkmalleiste <' + SML_GetLabel() + '> konnte nicht kopiert werden: ' + CRLF +
                 'Anlegen einer neuen Sachmerkmalleiste nicht möglich!', mtError),
   endif,
end,

//******************************************************************************
// Action: Sachmerkmale pflegen
//******************************************************************************
function A_EditExecute( Sender )
| bIsEdit |
   if Bof(m_oAssignmentTable) and Eof(m_oAssignmentTable) then
      bIsEdit := EditModes(m_oMainTable),
      if bIsEdit or DbEdit(m_oMainTable) then
         if not ShowVariantEdit(False) and not bIsEdit then
            // Edit-Modus nur verlassen, wenn explizit in dieser Funktion in den
            // Edit-Modus gewechselt wurde und keine Änderungen an den Merkmalen
            // vorgenommen wurden
            DbCancel(m_oMainTable),
         endif,
      else
         MessageDlg('Die Merkmale der Sachmerkmalleiste <' + SML_GetLabel() +
                    '> konnten nicht editiert werden!', mtError),
      endif,
   else
      ShowVariantEdit(True),
   endif,
end,

//******************************************************************************
//
//******************************************************************************
function A_FirstExecute( Sender )
   DbGoTop(m_oMainTable),
end,

//******************************************************************************
//
//******************************************************************************
function A_LastExecute( Sender )
   DbGoBottom(m_oMainTable),
end,

//******************************************************************************
//
//******************************************************************************
function A_PreviousExecute( Sender )
   DbSkip(-1, m_oMainTable),
end,

//******************************************************************************
//
//******************************************************************************
function A_NextExecute( Sender )
   DbSkip(1, m_oMainTable),
end,

//******************************************************************************
// Action: Änderungen verwerfen
//******************************************************************************
function A_CancelExecute( Sender )
   if Jn('Änderungen für Sachmerkmalleiste <' + SML_GetLabel() + '> verwerfen?', False) then
      DbCancel(m_oMainTable),
   endif,
end,

//******************************************************************************
// Action: Speichern der Sachmerkmalleiste
//******************************************************************************
function A_SaveExecute( Sender )
| cSMLKey |

   m_bMainTableExpicitPost := True,
   startseq
      // Falls der User als letztes die Sachmerkmalleisten-Nummer eingegeben hat
      // und anschließend direkt A_Save ausgelöst hat, muss der Focus in ein
      // anderes Control gesetzt werden, damit das OnValidateValue-Event des
      // Controls für Feld NUMMER ausgelöst wird.
      if oForm.ActiveControl = edt_Key then
         MyFocusControl(oForm, edt_Label),
         MyFocusControl(oForm, edt_Key),
      endif,
      // NUMMER aus Tabellenfeld lesen
      cSMLKey := Trim(m_oMainTable:NUMMER),
      // Validierung der Sachmerkmalleisten-Nummer:
      //  * Nummer ist leer -> OK
      //  * Nummer ist nicht leer, aber Nummer ist eindeutig -> OK
      if Empty(cSMLKey) or SML_IsSMLKeyUnique(cSMLKey, m_oMainTable:ID) then
         DbStartTrans(m_oDM.AdsConnection),
         startseq
            SML_StoreUsageTable(m_oDM, m_oMainTable:ID, GetSLMemo()),
            if not DbPost(m_oMainTable) then
               MessageDlg('Sachmerkmalleiste <' + SML_GetLabel() +
                          '> konnte nicht gespeichert werden!', mtError),
            else
               DbCommit(m_oDM.AdsConnection),
            endif,
         always
            if DbInTrans(m_oDM.AdsConnection) then
               DbRollback(m_oDM.AdsConnection),
               DbResetDM(m_oDM.AdsConnection),
            endif,
         stopseq,
      else
         MessageDlg('Die Sachmerkmalleisten-Nummer <' + cSMLKey + '> ist nicht eindeutig!', mtError),
      endif,
   onerror
      GU_ShowStdErrorMessage('Fehler beim Speichern', GetErrorObj()),
   stopseq,
end,

//******************************************************************************
// Action: Sachmerkmalleiste löschen
//******************************************************************************
function A_DeleteExecute( Sender )
   startseq
      if Jn('Sachmerkmalleiste <' + SML_GetLabel() + '> löschen?', False) then
         DbStartTrans(m_oDM.AdsConnection),
         startseq
            SML_DeleteAllUsageTable(m_oDM, m_oMainTable:ID),
            if not DbDelete(m_oMainTable) then
               MessageDlg('Die Sachmerkmalleiste <' + SML_GetLabel() +
                          '> konnte nicht gelöscht werden!', mtError),
            else
               DbCommit(m_oDM.AdsConnection),
            endif,
         always
            if DbInTrans(m_oDM.AdsConnection) then
               DbRollBack(m_oDM.AdsConnection),
            endif,
         stopseq,
      endif,
   onerror
      GU_ShowStdErrorMessage('Fehler beim Löschen', GetErrorObj()),
   stopseq,
end,

//******************************************************************************
// Action: Neue Sachmerkmalleiste anlegen
//******************************************************************************
function A_NewExecute( Sender )
   startseq
      if DbAppend(m_oMainTable) then
         m_oMainTable:AKTIV      := False,
         m_oMainTable:SICHT_SUCH := True,
         // U.u. ist das zu fokussierende Control disabled, weil die
         //  ActionsEnabled()-Funktion (welche u.a. auch die Enabled-Zustände
         //  der Controls steuert) zu spät greift.
         // Das kann z.B. dann geschehen, wenn noch keine Datensätze im
         //  Sachmerkmalleisten-Stamm existieren, weil dann zu diesem Zeitpunkt
         //  alle Controls disabled sind.
         // Wenn nun veruscht wird mit MyFocusControl() ein Control zu
         //  fokussieren, wird durch MyFocusControl() eine Exception ausgelöst.
         // Dies soll verhindert werden, indem der Enabled-Zustand des Conrols
         //  explizit gesetzt wird.
         if not edt_Label.Enabled then
            edt_Label.Enabled := True,
         endif,
         MyFocusControl(oForm, edt_Label),
      else
         MessageDlg('Anlegen einer neuen Sachmerkmalleiste nicht möglich!', mtError),
      endif,
   onerror
      GU_ShowStdErrorMessage('Fehler bei der Neuanlage', GetErrorObj()),
   stopseq,
end,


//##############################################################################
//##############################################################################
// Oberflächen-Funktionen
//##############################################################################
//##############################################################################

//******************************************************************************
// InitForm lädt das Formular in Abhängigkeit des Owners
// @Result: null
//******************************************************************************
function InitForm()
   if Empty(m_oOwner) then
      oForm := LoadForm(m_cFormID, Application),
   else
      oForm             := LoadForm(m_cFormID, m_oOwner),
      oForm.FormStyle   := fsMDIChild,
      oForm.Windowstate := wsMaximized,
   endif,

   oForm.PositionSaveID := m_cPositionSaveID,
   oForm.Name           := GFU_CalcFormularName('SML', oForm, m_oOwner),

   AssignEvent(oForm.CbHelper, 'OnCbUserDefinedEvent', 'Form_OnUserDefinedEvent'),
end,

//******************************************************************************
// Zusätzliche Oberflächen-Controls erzeugen
// @Result: null
//******************************************************************************
function CreateAdditionalControls()
   pnl_SMLView := CreateObject('TVarCalcPanel', 'pnl_SMLView', oForm, pnl_Detail),
   pnl_SMLView.Align                 := alClient,
   pnl_SMLView.AlignWithMargins      := True,
   pnl_SMLView.BevelOuter            := bvNone,
   pnl_SMLView.ReadOnly              := True,
   pnl_SMLView.FormVarCalc.Font.Name := 'Segoe UI',
end,

//******************************************************************************
// LoadGUI lädt sämtliche Komponenten die für die Oberfläche benötigt werden
// @Result: null
//******************************************************************************
function LoadGUI()
   // @VZB@ der nachfolgende Teil wird automatisch gepflegt
   A_Cancel                       := FindObject(oForm, "A_Cancel"),
   A_Copy                         := FindObject(oForm, "A_Copy"),
   A_Delete                       := FindObject(oForm, "A_Delete"),
   A_DeleteOrphanedAssignments    := FindObject(oForm, "A_DeleteOrphanedAssignments"),
   A_DifferenceAnalysis           := FindObject(oForm, "A_DifferenceAnalysis"),
   A_Edit                         := FindObject(oForm, "A_Edit"),
   A_ExportSML                    := FindObject(oForm, "A_ExportSML"),
   A_First                        := FindObject(oForm, "A_First"),
   A_ImportSML                    := FindObject(oForm, "A_ImportSML"),
   A_Last                         := FindObject(oForm, "A_Last"),
   A_New                          := FindObject(oForm, "A_New"),
   A_Next                         := FindObject(oForm, "A_Next"),
   A_Previous                     := FindObject(oForm, "A_Previous"),
   A_RefreshUsage                 := FindObject(oForm, "A_RefreshUsage"),
   A_Save                         := FindObject(oForm, "A_Save"),
   actions                        := FindObject(oForm, "actions"),
   bar_Main                       := FindObject(oForm, "bar_Main"),
   bar_Usage                      := FindObject(oForm, "bar_Usage"),
   bardock_Top                    := FindObject(oForm, "bardock_Top"),
   bardock_Usage                  := FindObject(oForm, "bardock_Usage"),
   barmngr_Main                   := FindObject(oForm, "barmngr_Main"),
   bbtn_Cancel                    := FindObject(oForm, "bbtn_Cancel"),
   bbtn_Copy                      := FindObject(oForm, "bbtn_Copy"),
   bbtn_Delete                    := FindObject(oForm, "bbtn_Delete"),
   bbtn_DeleteOrphanedAssignments := FindObject(oForm, "bbtn_DeleteOrphanedAssignments"),
   bbtn_DifferenceAnalysis        := FindObject(oForm, "bbtn_DifferenceAnalysis"),
   bbtn_Edit                      := FindObject(oForm, "bbtn_Edit"),
   bbtn_Export                    := FindObject(oForm, "bbtn_Export"),
   bbtn_First                     := FindObject(oForm, "bbtn_First"),
   bbtn_Import                    := FindObject(oForm, "bbtn_Import"),
   bbtn_Last                      := FindObject(oForm, "bbtn_Last"),
   bbtn_New                       := FindObject(oForm, "bbtn_New"),
   bbtn_Next                      := FindObject(oForm, "bbtn_Next"),
   bbtn_Previous                  := FindObject(oForm, "bbtn_Previous"),
   bbtn_RefreshUsage              := FindObject(oForm, "bbtn_RefreshUsage"),
   bbtn_Save                      := FindObject(oForm, "bbtn_Save"),
   chk_Active                     := FindObject(oForm, "chk_Active"),
   chk_Visible                    := FindObject(oForm, "chk_Visible"),
   cmb_Workarea                   := FindObject(oForm, "cmb_Workarea"),
   ds_AssignmentTable             := FindObject(oForm, "ds_AssignmentTable"),
   ds_MainTable                   := FindObject(oForm, "ds_MainTable"),
   edt_Description                := FindObject(oForm, "edt_Description"),
   edt_Key                        := FindObject(oForm, "edt_Key"),
   edt_Label                      := FindObject(oForm, "edt_Label"),
   edt_Search                     := FindObject(oForm, "edt_Search"),
   grd_AssignmentBrowser          := FindObject(oForm, "grd_AssignmentBrowser"),
   grd_MainBrowser                := FindObject(oForm, "grd_MainBrowser"),
   ipnl_SMLView                   := FindObject(oForm, "ipnl_SMLView"),
   ipnl_Title                     := FindObject(oForm, "ipnl_Title"),
   ipnl_Usage                     := FindObject(oForm, "ipnl_Usage"),
   lbl_Description                := FindObject(oForm, "lbl_Description"),
   lbl_Key                        := FindObject(oForm, "lbl_Key"),
   lbl_Label                      := FindObject(oForm, "lbl_Label"),
   lbl_NoPropertiesHint           := FindObject(oForm, "lbl_NoPropertiesHint"),
   lbl_UsageInfo                  := FindObject(oForm, "lbl_UsageInfo"),
   lbl_Workarea                   := FindObject(oForm, "lbl_Workarea"),
   pc_Detail                      := FindObject(oForm, "pc_Detail"),
   pnl_Detail                     := FindObject(oForm, "pnl_Detail"),
   pnl_Grid                       := FindObject(oForm, "pnl_Grid"),
   pnl_SMLSettings                := FindObject(oForm, "pnl_SMLSettings"),
   pnl_Usage                      := FindObject(oForm, "pnl_Usage"),
   ts_Data                        := FindObject(oForm, "ts_Data"),
   ts_Usage                       := FindObject(oForm, "ts_Usage"),
   // @VZE@ der vorangehende Teil wird automatisch gepflegt
end,

//******************************************************************************
// Eigenes Datenmodul erstellen, benötigte Tabellen öffnen und mit GUI verbinden
//******************************************************************************
function OpenDataBaseAndLinkToGUI()
   // Datenmodul auf Formular erzeugen, damit es nicht explizit zerstört werden
   // muss
   m_oDM := CreateObject('TBeDbGet', 'DM_SML_Verwaltung', oForm),

   // Haupttabelle aus Datenmodul holen
   m_oMainTable := DbGetTable(m_oDM, m_nMainTableWorkarea, m_cMainTableAlias),
   GU_LinkTableToGUI(m_oMainTable, ds_MainTable, grd_MainBrowser, m_cBrowserID, True),
   m_bMainTableExpicitPost := False,
   AssignEvent(ds_MainTable, 'OnScroll_Update', 'ds_MainTableScroll_Update'),
   AssignEvent(m_oMainTable, 'BeforePost',      'MainTable_BeforePost'),

   // Zuordnungstabelle aus Datenmodul holen und Index setzen
   m_oAssignmentTable := DbGetTable(m_oDM, m_nAssignmentTableWorkarea, m_cAssignmentTableAlias),
   m_oAssignmentTable.IndexName := m_cAssignmentTableIndex,
   // Tabelle wird nur gelesen -> Keine Stammdatenprotokollierung notwendig
   GU_LinkTableToGUI(m_oAssignmentTable, ds_AssignmentTable, grd_AssignmentBrowser, m_cAssignmentBrowserID, False),
   AssignEvent(ds_AssignmentTable, 'OnScroll_Update', 'ds_AssignmentTableScroll_Update'),

   // DataSource mit GUI-Controls verbinden
   edt_Label.DataSource       := ds_MainTable,
   edt_Key.DataSource         := ds_MainTable,
   edt_Description.DataSource := ds_MainTable,
   cmb_Workarea.DataSource    := ds_MainTable,
   chk_Active.DataSource      := ds_MainTable,
   chk_Visible.DataSource     := ds_MainTable,
   edt_Label.DataField        := 'BEZ',
   edt_Key.DataField          := 'NUMMER',
   edt_Description.DataField  := 'MEMO',
   cmb_Workarea.DataField     := 'VERWEND_WA',
   chk_Active.DataField       := 'AKTIV',
   chk_Visible.DataField      := 'SICHT_SUCH',
end,

//******************************************************************************
// Standardeinstellungen setzen
//******************************************************************************
function SetDefaults()
   pnl_SMLView.Caption        := '',
   oForm.OrigCapt             := 'Sachmerkmalleisten verwalten',
   edt_Label.Font.Style       := fsBold,
   edt_Key.Font.Style         := fsBold,
   edt_Description.Font.Style := fsBold,
   cmb_Workarea.Font.Style    := fsBold,
   chk_Active.Font.Style      := fsBold,
   chk_Visible.Font.Style     := fsBold,

   // 200ms Scroll-Delay für Datenbrowser, damit das TVarCalcPanel nicht bei
   // jedem Datensatz wechsel aktualisiert werden muss.
   ds_MainTable.ScrollDelay := 200,

   m_bSMLHasOrphanedAssignments := True,

   LoadSettings(),
end,

//******************************************************************************
// ShowGUI zeigt das GUI an, das vorher mit LoadGUI geladen werden muss.
//******************************************************************************
function ShowGUI()
   if Empty(m_oOwner) then
      ShowModal(oForm),
   else
      Show(oForm),
   endif,
end,


//##############################################################################
//##############################################################################
// Hauptprogramm
//##############################################################################
//##############################################################################

startseq
   InitForm(),
   LoadGUI(),
   CreateAdditionalControls(),
   OpenDataBaseAndLinkToGUI(),
   SetDefaults(),
   ShowGUI(),
onerror
   GU_ShowStdErrorMessage('Fehler im Programm ' + ProgName(), GetErrorObj()),
   DestroyObject(oForm),
stopseq,

oForm


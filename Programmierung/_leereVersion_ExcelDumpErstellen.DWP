| cDestinationPath |

//******************************************************************************
// Funktion exportiert alle Inhalte der Tabelle @nWorkarea nach @cDestinationFileName
// @Result: null
//******************************************************************************
function ExportWorkarea(nWorkarea, cDestinationFileName)
| oDabxxx |
   oDabxxx := BeOpen(nWorkarea),
   startseq
      ExportExcelFile(cDestinationFileName, oDabxxx, true),
   always
      BeClose(oDabxxx),
   stopseq,
end,

//******************************************************************************
// Funktion exportiert alle Tabellen als Excel-File in das Ziel-Verzeichnis @cDestPath
// @Result: null
//******************************************************************************
function ExportAllWorkareas(cDestPath)
| i, nCurrentWorkarea, oTableInfo, cAliasName |
   for i := 1 to 799 do // alle Standard und Individual-Tabellen durchgehen
      nCurrentWorkarea := i,
      oTableInfo       := GetTableInfo(nCurrentWorkarea),  // Liefern eine Instanz von TBeTableInfo oder nil
      if not empty(oTableInfo) then
         cAliasName := AllTrim(oTableInfo.TableDef.AliasName),
         Writeln('exportiere ' + cAliasName),
         ExportWorkarea(nCurrentWorkarea, cDestPath + '\' + 'Workarea_' + StrZero(nCurrentWorkarea, 3) + '_' + cAliasName + '.xlsx'),
      endif,
   next,
end,

cDestinationPath := StrTran(Upper(mBeDefault), '\WINBE', '\_leere_version_excel_dump'),
WriteLn('Ziel-Verzeichnis <' + cDestinationPath + '>'),

if ForceDirectories(cDestinationPath) then
   ExportAllWorkareas(cDestinationPath),
else
   SetError('Ziel-Verzeichnis konnte nicht erstellt werden.'),
endif,

//##############################################################################
//##############################################################################
// Beschreibung: Pflege der Beistellpositionen als Docking
//##############################################################################
//##############################################################################

|
  m_oOwnerForm:P1, m_cFormRefKey:P2, m_oMasterTable:P3,

  m_cFormClassID, m_cWinPosSaveId, m_cBrowserId, m_nLastTableState,
  m_oDM, m_oEVSBSP, m_oStuecklisteTable, m_oStueckListeMemTable, m_oDab010, m_cBrowserPosID,
  m_cBrowserId_Dab210, m_cBrowserId_Dab240,
  m_bIsExternArt, m_bIsAssigned, m_bExplicitPost, m_bIsTypManuell, m_bEnableActions,

  // @VDB@ der nachfolgende Teil wird automatisch gepflegt
   oForm, A_AdoptPos, A_Cancel, A_Delete, A_HelpContent, a_hilfe, A_Left,
   A_NewPosFromMasterTable, A_NewPosManual, A_Right, A_Save, AL_Main,
   beBarButton1, beBarButton2, beBarButton3, beBarButton4, beBarButton5,
   beBarButton6, beBarDockControl1, beGroupPanel1, BeSplitter1, bipnl_Top,
   btn_Left, btn_Right, ds_EVSBSP, ds_Mastertable, ds_StuecklisteMemTable,
   ds_StuecklisteTable, edt_bez, edt_GEWICHT, edt_me, edt_Menge, grd_EVSBSP,
   grd_Mastertable, lbl_bez, lbl_GEWICHT, lbl_HeadlineEVSBSP,
   lbl_HeadlineStueli, lbl_ME, lbl_Menge, pnl_1, pnl_beistellstueckliste,
   pnl_Bottom, pnl_BottomGrids, pnl_buttons, pnl_EVSBSP, pnl_Main,
   pnl_MainEVSBSP, pnl_Top, pnl_verf_positionen, pnl_verfuegbar, tbar_Manager,
   tbar_ManagerBar1
  // @VDE@ der vorangehende Teil wird automatisch gepflegt
|

//##############################################################################
//##############################################################################
// Konstanten
//##############################################################################
//##############################################################################

m_cFormClassID         := "@EVSBSP",
m_cWinPosSaveId        := "@EVSBSP",
m_cBrowserId_Dab210    := "@BSP_D210",
m_cBrowserId_Dab240    := "@BSP_D240",
m_cBrowserPosID        := "@TBLD210",
m_nLastTableState      := DBState(m_oEVSBSP),
m_bExplicitPost        := false,
m_bEnableActions       := true,

//##############################################################################
//##############################################################################
// Funktionen
//##############################################################################
//##############################################################################

//******************************************************************************
// SetDefault: Standard-Einstellungen setzen
// @Result: null
//******************************************************************************
function SetDefaults()
   edt_GEWICHT.Picture.PictureMask := '*6[#][;,*4[#]]',
   lbl_GEWICHT.Caption := lbl_GEWICHT.Caption + ' (kg)',
end,

//******************************************************************************
// Eigenes Datenmodul erstellen, benötigte Tabellen öffnen und mit GUI verbinden
//******************************************************************************
function OpenDataBaseAndLinkToGUI()
| cBrowserPosID, cBrowserID, m_cArtNr, cFilter |
   m_oDM                       := CreateObject('TBeDbGet', 'EVSBSPDM', oForm),
   m_oEVSBSP                   := DbGetTable(m_oDM, waEVSBSP),
   m_oDab010                   := DbGetTable(m_oDM, waDAB010),
   m_oStuecklisteTable         := DbGetTable(m_oDM, m_oMasterTable.Workarea),               // Zweite Instanz der MasterTable (DAB210 oder DAB240)
   ds_StuecklisteTable.DataSet := m_oStuecklisteTable,

   m_oStuecklisteMemTable           := CreateObject('TBeMemTable', 'MEMMAIN' , oForm, oForm),  // MEM-Table mit Inhalt von Mastertable (DAB210 oder DAB240) und DAB010:ARTTYP
   m_oStuecklisteMemTable.AliasName := 'MEMMAINTBL',

   m_oStuecklisteMemTable.CbAddField("ID", FtInteger, 0),
   m_oStuecklisteMemTable.CbAddField("POSNR", FtString, 6),
   m_oStuecklisteMemTable.CbAddField("ARTTYP", FtString, 1),
   m_oStuecklisteMemTable.CbAddField("ARTNR", FtString, mBeArtNoLen),
   m_oStuecklisteMemTable.CbAddField("ARTNR_EXT", FtString, mBeArtNoLen),
   m_oStuecklisteMemTable.CbAddField("BEZ", FtString, 40),
   m_oStuecklisteMemTable.CbAddField("MENGE", FtInteger, 0),
   m_oStuecklisteMemTable.CbAddField("Workarea", FtInteger, 0),
   m_oStuecklisteMemTable.CbAddField("ASSIGNED", FtBoolean, 0),
   m_oStuecklisteMemTable.Active      := true,
   m_oStuecklisteMemTable.CbAddIndex('INDEX_1', 'ID', ixPrimary),
   m_oStuecklisteMemTable.CbIndexname := 'INDEX_1',


   // Lokales DataSource mit der übergebenen Master-Tabelle verbinden,
   // damit eine (eigene, lokale) Komponente mit den notwendigen Events zur
   // Reaktion auf Master-Table-Aktionen bereit steht
   GFU_Docking_LinkMasterTableToLocalDataSource(m_oMasterTable, ds_Mastertable, m_oMasterTable.WorkArea, 'TBeRightstable'),

   case m_oMasterTable.Workarea
      of waDAB210 :: m_oEVSBSP.IndexName    := 'DAB210_ID',
                     DBFilter("DAB210_ID = " + Str(m_oMasterTable:ID) + "and not (DAB210_ID = NULL)", m_oEVSBSP),
                     cBrowserID             := m_cBrowserId_Dab210,

      of waDAB240 :: m_oEVSBSP.IndexName := 'DAB240_ID',
                     DBFilter("DAB240_ID = " + Str(m_oMasterTable:ID), m_oEVSBSP),
                     cBrowserID             := m_cBrowserId_Dab240,
   endcase,

   GU_LinkTableToGUI(m_oEVSBSP, ds_EVSBSP, grd_EVSBSP, cBrowserID, false),

   GU_LinkTableToGui(m_oStuecklisteMemTable, ds_StuecklisteMemTable, grd_Mastertable, m_cBrowserPosID, false),

   AssignEvent(m_oEVSBSP, 'BeforePost',   'm_oEVSBSP_BeforePost'),
   AssignEvent(m_oEVSBSP, 'OnNewRecord',  'm_oEVSBSP_NewRecord'),

end,

//******************************************************************************
// Allgemeine Funktion zum Löschen eines Tabellen-Inhalts
// @Result: null
//******************************************************************************
function DeleteContentFromTable(oTable)
   if not Empty(oTable) and
      not NoDs(oTable) then
      DeleteAllData(oTable),
   endif,
end,

//******************************************************************************
// Leert zuerst die MemTable m_oMemEVSPSI und befüllt sie danach wieder (refresh)
//******************************************************************************
function GetMemMainPositions()
| oQuery, cSQL, nTblNo, cArtNr, oSeek010, cMenge, cIndex, cIndex2 |
   oSeek010         := BeOpen(waDAB010, 'DAB011'),
   startseq
      DbScope(, m_oStueckListeTable),
      //DbFilter('', m_oStueckListeTable),
      DbDisableControls(m_oStuecklisteTable),
      DbDisableControls(m_oStuecklisteMemTable),
      startseq
         DeleteContentFromTable(m_oStuecklisteMemTable),
       //  DbFilter("ARTNR1 = '" + m_oMasterTable:ARTNR1 + "'" , m_oStueckListeTable),
            case m_oMastertable.Workarea
               of waDAB210 :: m_oStueckListeTable.IndexName := 'DAB211',
                              DBScope({m_oMasterTable:ARTNR1}, {m_oMasterTable:ARTNR1}, m_oStueckListeTable),
               of waDAB240 :: m_oStueckListeTable.IndexName := 'DAB241',
                              DBScope({SubStr(m_oMasterTable:B_POS_LFD, 1, 6)+ '  001'}, {SubStr(m_oMasterTable:B_POS_LFD, 1, 6) + '  999'}, m_oStueckListeTable),
            endcase,
         DBGoTop(m_oStueckListeTable),
         while not Eof(m_oStueckListeTable) do
            case m_oMastertable.Workarea
               of waDAB210 :: cMenge  := AsString('MENGE', m_oStueckListeTable),
                              cArtNr  := AsString('ARTNR2', m_oStueckListeTable),
                              cIndex  := 'DAB210_ID',
               of waDAB240 :: cMenge  := AsString('SOLL', m_oStueckListeTable) * lookup(waDAB240, 'DAB241', {{SubStr(m_oMasterTable:B_POS_LFD, 1, 6)+ '  000'}}, 'SOLL', 0),
                              cArtNr  := AsString('ARTNR_E', m_oStueckListeTable),
                              cIndex  := 'DAB240_ID',
            endcase,
            if m_bIsExternArt and DBSeek({cArtNr}, oSeek010) then
               if not oSeek010:ARTTYP $ 'AE' then
                  m_oStuecklisteMemTable.CbAppend(),
                  m_oStuecklisteMemTable:ID        := m_oStueckListeTable:ID,
                  m_oStuecklisteMemTable:ARTNR     := cArtNr,
                  m_oStuecklisteMemTable:ARTNR_EXT := m_oStueckListeTable:ARTNR1,
                  m_oStuecklisteMemTable:POSNR     := m_oStueckListeTable:POSNR,
                  m_oStuecklisteMemTable:MENGE     := cMenge,
                  m_oStuecklisteMemTable:ARTTYP    := oSeek010:ARTTYP,
                  m_oStuecklisteMemTable:BEZ       := '',
                  m_oStuecklisteMemTable:WorkArea  := m_oStueckListeTable.Workarea,
                  m_oStuecklisteMemTable:ASSIGNED  := lookup(waEVSBSP, cIndex, {{m_oMastertable:ID, m_oStueckListeTable:ID}}, 'not Eof()', false,,,,true),
                  m_oStuecklisteMemTable.CbPost(),
               endif,
            endif,
            DBSkip(1, m_oStueckListeTable),
         end,
      always
         DbEnableControls(m_oStueckListeTable),
         DbEnableControls(m_oStuecklisteMemTable),
      stopseq,
   always
      BeClose(oSeek010),
   stopseq,
end,

//******************************************************************************
// Zentrale Steuerung des "Enabled-Zustand" aller Actions
//******************************************************************************
function ActionsEnabled()
| bInEditMode, bWorkAreaIsDab240, bEVSBSPIsEmpty, bExtArtSelf, cArtNr, bInEVSSDI |
   case m_oMastertable.Workarea
      of waDAB210 :: cArtNr := m_oMasterTable:ARTNR2,
      of waDAB240 :: cArtNr := m_oMasterTable:ARTNR_E,
   endcase,

   m_bIsAssigned     := not empty(m_oStuecklisteMemTable) and m_oStuecklisteMemTable:ASSIGNED,
   bInEditMode       := EditModes(m_oEVSBSP),
   bEVSBSPIsEmpty    := NoDs(m_oEVSBSP),
//   bInEVSSDI         := lookup(waEVSSDI, 'EVSBSP_ID', {{m_oEVSBSP:ID}}, 'Not Eof()'),
   bInEVSSDI := false,
   bWorkAreaIsDab240 := m_oMasterTable.Workarea = waDab240,
   m_bIsExternArt    := not empty(m_oStuecklisteMemTable) and lookup(waDAB010, 'DAB011', {{cArtNr}}, 'ARTTYP', '') = 'E',
   m_bIsTypManuell   := m_oEVSBSP:TYP = GL_EVS_BSP_TYP_MANUELL,
   bExtArtSelf       := m_oMasterTable:ID = m_oStueckListeTable:ID,

   A_NewPosManual.Enabled           := not bInEditMode and m_bIsExternArt and not bInEVSSDI,
   A_Save.Enabled                   := bInEditMode and not bInEVSSDI,
   A_Cancel.Enabled                 := bInEditMode,
   A_Delete.Enabled                 := not bEVSBSPIsEmpty and not bInEditMode and not bInEVSSDI,
   A_Left.Enabled                   := not bInEditMode and m_bIsExternArt and not m_bIsAssigned, //and not bInEVSSDI,

   A_Right.Enabled                  := not bInEditMode and not bEVSBSPIsEmpty and not m_bIsTypManuell and not bInEVSSDI,
   A_AdoptPos.Visible               := bWorkAreaIsDab240,
   A_AdoptPos.Enabled               := EVS_CheckBeistellPositionFromDAB240(m_oMastertable:ID) and m_bIsExternArt,

   edt_BEZ.ReadOnly                 := bEVSBSPIsEmpty,
   edt_BEZ.ReadOnlyStateFromField   := not bEVSBSPIsEmpty,

   edt_Menge.ReadOnly               := false,
   edt_Menge.Visible                := m_bIsTypManuell,
   edt_GEWICHT.Visible              := m_bIsTypManuell,
   edt_ME.Visible                   := m_bIsTypManuell,
end,

//******************************************************************************
// Position zuteilen
// @Result: null
//******************************************************************************
function AssignPos()
| oOldCursor, nVER_ID |
   oOldCursor := SetCursor(crHourglass),
   DBDisableControls(m_oStuecklisteMemTable),
   DBDisableControls(m_oEVSBSP),
   startseq,
      if m_bIsExternArt then
         BeginSuspend(m_oEVSBSP),
         m_bExplicitPost := true,
         startseq,
            if not m_bIsAssigned then
               DbAppend(m_oEVSBSP),
               case m_oMasterTable.Workarea
                  of waDAB210 ::
                     m_oEVSBSP:DAB210_ID  := m_oMasterTable:ID,
                     m_oEVSBSP:WORKAREA   := waDAB210,
                     m_oEVSBSP:VER_210_ID := m_oStuecklisteMemTable:ID,
                  of waDAB240 ::
                     m_oEVSBSP:DAB240_ID  := m_oMasterTable:ID,
                     m_oEVSBSP:WORKAREA   := waDAB240,
                     m_oEVSBSP:VER_240_ID := m_oStuecklisteMemTable:ID,
               endcase,
               m_oEVSBSP:BEZ              := m_oStuecklisteMemTable:BEZ,
               m_oEVSBSP:TYP              := gl_EVS_BSP_TYP_AusStueckliste,
               DbPost(m_oEVSBSP),

               // in m_oStuecklisteMemTable Position als Assigned markieren
               MyEdit(m_oStuecklisteMemTable),
               m_oStuecklisteMemTable:ASSIGNED := true,
               MyPost(m_oStuecklisteMemTable),
               DbRefresh(m_oStuecklisteMemTable),
            endif,
            ActionsEnabled(),
         always
            EndSuspend(m_oEVSBSP),
            m_bExplicitPost := false,
         stopseq,
      else
         MessageDlg('Der ausgewählte Artikel ist kein Extern-Artikel.' + crlf +
                    'Bitte Klicken Sie innerhalb der Stückliste auf einen Extern-Artikel um Zuweisungen vornehmen zu können.', MtInformation),
      endif,
   always
   SetCursor(oOldCursor),
   DBEnableControls(m_oStuecklisteMemTable),
   DBEnableControls(m_oEVSBSP),
stopseq,
end,

//******************************************************************************
// Checkt, ob die Position in der Maintable die Externleistung ist
// @Result: boolean (true = Position ist die Externleistung)
//******************************************************************************
function PosIsExternLeistung()
   Result := false,
   case m_oMasterTable.WorkArea
      of waDAB210 :: if lookup(waDAB010, 'DAB011', {{m_oStueckListeTable:ARTNR2}}, 'ARTTYP', '') = 'E' then
                        result := true,
                     endif,
      of waDAB240 :: if lookup(waDAB010, 'DAB011', {{m_oStueckListeTable:ARTNR_E}}, 'ARTTYP', '') = 'E' then
                        result := true,
                     endif,
   endcase,
end,

//******************************************************************************
// Scroll-Update auf m_oStueckListeTable auslösen
// @Result: null
//******************************************************************************
function RefreshMainTable()
| nRecNo |
   DbDisableControls(m_oStuecklisteMemTable),
   startseq
      nRecNo := DBRecNo(m_oStuecklisteMemTable),
      GetMemMainPositions(),
      DbGoTo(nRecNo, m_oStuecklisteMemTable),
   always
      DbEnableControls(m_oStuecklisteMemTable),
   stopseq,
end,

//******************************************************************************
// Löscht eine Beistellung aus der Liste der Beistell-Position
// (egal, ob manuell erstellt oder zugewiesen)
// @Result: boolean (true = wurde gelöscht)
//******************************************************************************
function DeleteEVSBSPPosition()
   if not empty(m_oEVSBSP) and not empty(m_oEVSBSP:ID) then
      DbDelete(m_oEVSBSP),
   endif,
end,

//******************************************************************************
// Beistell-Position aus DAB210 holen
// @Result: null
//******************************************************************************
function GetBeistellPosFromDAB210()
| oOldCursor |
   oOldCursor := SetCursor(crHourglass),
   DBDisableControls(m_oStuecklisteMemTable),
   startseq
      EVS_SetDAB240_BeistellPositionen(m_oDM, m_oMasterTable:B_POS_LFD),
   always
      DBFilter("DAB240_ID = " + Str(m_oMasterTable:ID) + "and WORKAREA = " + Str(m_oMasterTable.Workarea), m_oEVSBSP),
      SetCursor(oOldCursor),
      DBEnableControls(m_oStuecklisteMemTable),
   stopseq,
end,

//******************************************************************************
// Ausgewählte Position löschen aus EVSBSP und Tabelle neu laden
// @Result: null
//******************************************************************************
function DeleteAndRefreshEVSBSP()
| cID |
   if A_Delete.Enabled then
      if jn('Position aus der Beistellungs-Liste entfernen?', false) then
//         if m_oEVSBSP:TYP = GL_EVS_BSP_TYP_AUSSTUECKLISTE then
//            case m_oMastertable.Workarea
//               of waDAB210 :: cID := m_oEVSBSP:Ver_210_ID,
//               of waDAB240 :: cID := m_oEVSBSP:Ver_240_ID,
//            endcase,

//            DbScope({cID}, {cID}, m_oStuecklisteMemTable),
//            if not NoDs(m_oStuecklisteMemTable) then
//               Browse(, m_oStuecklisteMemTable),
//               MyEdit(m_oStuecklisteMemTable),
//               m_oStuecklisteMemTable:ASSIGNED := false,
//               MyPost(m_oStuecklisteMemTable),
//            endif,
//         endif,
         DeleteEVSBSPPosition(),
         ActionsEnabled(),
      endif,
   endif,
end,

//##############################################################################
//##############################################################################
// Eventhandler
//##############################################################################
//##############################################################################

//******************************************************************************
// Event: Beim Klick auf Grid, ActionsEnabled ausführen
// Info: Ohne dieses Event müsste man erst in auf Grid klicken und anschließend
//       scrollen, um löschen zu können
//******************************************************************************
function grd_EVSBSPEnter( Sender )
   ActionsEnabled(),
end,

//******************************************************************************
// Event: Beim Klick auf Grid, ActionsEnabled ausführen
// Info: Ohne dieses Event müsste man erst in auf Grid klicken und anschließend
//       scrollen, um zuweisen zu können
//******************************************************************************
function grd_MastertableEnter( Sender )
   ActionsEnabled(),
end,

//******************************************************************************
// Event: Resize des Formulars
//******************************************************************************
function FormExResize( Sender )
   // Breite der beiden Panels anpassen, so dass diese immer gleich breit sind
//   pnl_GrdStueLI.Width := Trunc((oForm.Width - pnl_Controls.Width) / 2),
end,

//******************************************************************************
// Event: Scroll auf MainTable
//******************************************************************************
function ds_StuecklisteTableScroll_Update( Sender )
   ActionsEnabled(),
end,

//******************************************************************************
// Evevent: Das Event BeforePost verhindert den Post durch bspw. Scrollen.
//          Es kann nur durch aktives klicken des Speichern-Buttons gepostet werden
// @Result: null
//******************************************************************************
function m_oEVSBSP_BeforePost()
   startseq,
      if not m_bExplicitPost then
         DbCancel(m_oEVSBSP),
         Abort(true),
      endif,
   onerror
      GU_ShowStdErrorMessage('m_oEVSBSP_BeforePost', GetErrorObj()),
   stopseq,
end,

//******************************************************************************
// Event: Feld "Typ" der Tabelle EVSBSP initial mit "manuell" belegen, wenn ein
//        neuer Datensatz angelegt wird
// @Result: null
//******************************************************************************
function m_oEVSBSP_NewRecord()
   m_oEVSBSP:TYP := GL_EVS_BSP_TYP_MANUELL,
end,

//******************************************************************************
// Event: EVSBSP Scroll Update
//******************************************************************************
function ds_EVSBSPScroll_Update( Sender )
   ActionsEnabled(),
   RefreshMainTable(),
end,

//******************************************************************************
// Event: Beim Scroll auf MasterTable Filter nach ARTNR1 ändern
//******************************************************************************
function ds_MastertableScroll_Update( Sender )
| oOldCursor |
   startseq,
      oOldCursor := SetCursor(crHourglass),
      DBDisableControls(m_oStuecklisteMemTable),
      DBDisableControls(m_oEVSBSP),
      startseq,
         if not EditModes(m_oEVSBSP) then
            DbFilter('DAB210_ID = 0 AND DAB240_ID = 0', m_oEVSBSP),
            DeleteContentFromTable(m_oStuecklisteMemTable),

            case m_oMasterTable.Workarea
               of waDAB210 :: if lookup(waDAB010, 'DAB011', {{m_oMastertable:ARTNR2}}, 'ARTTYP', '') = 'E' then
                                 DBFilter("DAB210_ID = " + Str(m_oMasterTable:ID) + "and WORKAREA = " + Str(m_oMasterTable.Workarea), m_oEVSBSP),
                                 DbScope({m_oMastertable:ARTNR1}, {m_oMastertable:ARTNR1}, m_oStueckListeTable),
                              endif,

               of waDAB240 :: if lookup(waDAB010, 'DAB011', {{m_oMastertable:ARTNR_E}}, 'ARTTYP', '') = 'E' then
                                 DBFilter("DAB240_ID = " + Str(m_oMasterTable:ID) + "and WORKAREA = " + Str(m_oMasterTable.Workarea), m_oEVSBSP),
                                 DbScope({m_oMastertable:ARTNR1}, {m_oMastertable:ARTNR1}, m_oStueckListeTable),
                              endif,
            endcase,
         endif,
      always
         SetCursor(oOldCursor),
         DBEnableControls(m_oStuecklisteMemTable),
         DBEnableControls(m_oEVSBSP),
      stopseq,
   onerror
      GU_ShowStdErrorMessage('ds_MastertableScroll_Update', GetErrorObj()),
   stopseq,
end,

//******************************************************************************
// Event: Doppelklick auf EVSBSP
//******************************************************************************
function grd_EVSBSPDblClick( Sender )
   startseq
      DeleteAndRefreshEVSBSP(),
   onerror
      GU_ShowStdErrorMessage('Fehler beim Löschen der Position.', GetErrorObj()),
   stopseq,
end,

//******************************************************************************
// Event: Datensatz der EVSBSP-Tabelle hinzufügen
//******************************************************************************
function grd_MastertableDblClick( Sender )
   ActionExecute(A_Left),
end,

//******************************************************************************
// Event: Wenn sich die Tabelle (m_oEVSBSP) in EditModes() befindet, soll
//        Mastertable gesperrt sein.
//******************************************************************************
function ds_EVSBSPStateChange( Sender )
   startseq,
      ActionsEnabled(),

      if DbState(m_oEVSBSP) <> m_nLastTableState then
         if EditModes(m_oEVSBSP) then
            m_oMasterTable.CbBeginNoRecordMove(),
         else
            m_oMasterTable.CbEndNoRecordMove(),
         endif,
         m_nLastTableState := DbState(m_oEVSBSP),
      endif,
   onerror
      GU_ShowStdErrorMessage('ds_EVSBSPStateChange', GetErrorObj()),
   stopseq,
end,

//******************************************************************************
// Event: Abfrage, ob Fenster geschlossen werden kann
//******************************************************************************
function FormExCloseQuery( Sender, bCanClose )
   if EditModes(m_oEVSBSP) then
      bCanClose := false,
      MessageDlg('Datensatz befindet sich noch in Bearbeitungsmodus.', mtError)
   else
      bCanClose := true,
   endif,
end,

//******************************************************************************
// Event: Beim Scrollen in der Master-Tabelle => Docking aktualisieren
//******************************************************************************
function ds_StuecklisteMemTableScroll_Update( Sender )
   startseq,
      ActionsEnabled(),
   onerror
      GU_ShowStdErrorMessage('ds_StuecklisteMemTableScroll_Update', GetErrorObj()),
   stopseq,
end,

//******************************************************************************
// Event: Beim Schließen des Formulars
//******************************************************************************
function FormExClose( Sender, Action)
   if EditModes(m_oEVSBSP)  then
      Action := caNone,
      MessageDLG("Tabelle befindet sich im Editmodus"),
   else
      if m_oMasterTable.CbIsNoRecordMove() then
         m_oMasterTable.CbEndNoRecordMove(),
      endif,
      Action := caFree, // = Form zerstören
   endif,
end,

//******************************************************************************
// Event: Beim Zerstören des Formulars
//******************************************************************************
function FormExDestroy( Sender )
   GFU_DockingForm_Destroyed(oForm, m_cFormRefKey),
end,

//##############################################################################
//##############################################################################
// Actionhandler
//##############################################################################
//##############################################################################

//******************************************************************************
// Action: Pfeil nach Links: Stücklisten-Position Beistellung zuweisen
//******************************************************************************
function A_LeftExecute( Sender )
   startseq
      AssignPos(),
   onerror
      GU_ShowStdErrorMessage('Fehler beim Zuweisen der Stücklisten-Position.', GetErrorObj()),
   stopseq,
end,

//******************************************************************************
// Action: Datensatz löschen bzw. Zuweisung entfernen (gleiche Funktion wie A_Delete)
//******************************************************************************
function A_RightExecute( Sender )
   startseq
      DeleteAndRefreshEVSBSP(),
   onerror
      GU_ShowStdErrorMessage('Fehler beim Löschen der Zuweisung.', GetErrorObj()),
   stopseq,
end,

//******************************************************************************
// Action: Positionen aus Stücklisten-Tabelle in FA-Liste übernehmen
//******************************************************************************
function A_AdoptPosExecute( Sender )
| oOldCursor |
   startseq
      oOldCursor := SetCursor(crHourglass),
      DBDisableControls(m_oStuecklisteMemTable),
      DBDisableControls(m_oEVSBSP),
      startseq,
         GetBeistellPosFromDAB210(),
         ActionsEnabled(),
         RefreshMainTable(),
      always
         SetCursor(oOldCursor),
         DBEnableControls(m_oStuecklisteMemTable),
         DBEnableControls(m_oEVSBSP),
      stopseq,
   onerror
      GU_ShowStdErrorMessage('Fehler beim Zuweisen der Position.', GetErrorObj()),
   stopseq,
end,

//******************************************************************************
// Action: Individuelle Online-Hilfe aufrufen
//******************************************************************************
function A_HelpExecute( Sender )
   startseq
      IOHU_ShowOnlineHelpGui(gl_EVS_BSP_IndiOnlineHelp_SQLWhere),
   onerror
      GU_ShowStdErrorMessage('Fehler beim Öffnen der individuellen Online-Hilfe.', GetErrorObj()),
   stopseq,
end,

//******************************************************************************
// Action: Datensatz (Beistellung) löschen
//******************************************************************************
function A_DeleteExecute( Sender )
   startseq
      DeleteAndRefreshEVSBSP(),
   onerror
      GU_ShowStdErrorMessage('Fehler beim Löschen des Datensatzes ', GetErrorObj()),
   stopseq,
end,

//******************************************************************************
// Action: Abbrechen
//******************************************************************************
function A_CancelExecute( Sender )
   DBCancel(m_oEVSBSP),
   ActionsEnabled(),
end,

//******************************************************************************
// Action: Datensatz (Beistellung) speichern
//******************************************************************************
function A_SaveExecute( Sender )
   startseq
      m_bExplicitPost := true,
      startseq
         writeln(m_oEVSBSP:TYP, gl_EVS_BSP_TYP_Manuell),
         if m_oEVSBSP:TYP = gl_EVS_BSP_TYP_Manuell then
            if empty(edt_BEZ.Text) or Val(edt_Menge.Text) <= 0 then
               MessageDlg('Bitte geben Sie eine Bezeichnung ein und eine Menge größer 0.', mtError),
            else
               m_oEVSBSP:MENGE := Val(edt_Menge.Text),
               DbPost(m_oEVSBSP),
               ActionsEnabled(),
            endif,
         endif,
      always
         m_bExplicitPost := false,
      stopseq,
   onerror
      GU_ShowStdErrorMessage('Fehler beim Speichern des Datensatzes ', GetErrorObj()),
   stopseq,
end,

//******************************************************************************
// Action: Anlegen einer manuellen Beistellung
//******************************************************************************
function A_NewPosManualExecute( Sender )
   startseq
      BeginSuspend(m_oEVSBSP),
      startseq
         DbAppend(m_oEVSBSP),
         m_oEVSBSP:TYP      := gl_EVS_BSP_TYP_Manuell,
         m_oEVSBSP:WORKAREA := m_oMasterTable.Workarea,
         case m_oMasterTable.Workarea
            of waDAB210 :: m_oEVSBSP:DAB210_ID := m_oMasterTable:ID,
            of waDab240 :: m_oEVSBSP:DAB240_ID := m_oMasterTable:ID,
         endcase,
      always
         EndSuspend(m_oEVSBSP),
      stopseq,
      RefreshreadOnlyColor(edt_menge),
      RefreshreadOnlyColor(edt_BEZ),
      MyFocusControl(oForm,edt_BEZ),
      ActionsEnabled(),
   onerror
      GU_ShowStdErrorMessage('Fehler beim Anlegen der manuellen Beistellung ', GetErrorObj()),
      DbCancelAll(m_oEVSBSP),
      ActionsEnabled(),
   stopseq,
end,

//##############################################################################
//##############################################################################
// Oberflächen-Funktionen
//##############################################################################
//##############################################################################

//******************************************************************************
// InitForm lädt das Formular in Abhängigkeit des Owners
// @Result: null
//******************************************************************************
function InitForm()
   if empty(m_oOwnerForm) then
      oForm             := LoadForm(m_cFormClassID, Application),
   else
      oForm             := LoadForm(m_cFormClassID, m_oOwnerForm),
      oForm.BorderStyle := bsSizeToolWin, // notwendig für Dockbarkeit
   endif,
   oForm.FormStyle      := fsNormal,
   oForm.PositionSaveID := m_cWinPosSaveId,
   oForm.Name           := GFU_CalcFormularName(m_cFormRefKey, oForm, m_oOwnerForm), // Eindeutiger Formular-Name für Docking-Logik
end,

//******************************************************************************
// LoadGUI lädt sämtliche Komponenten die für die Oberfläche benötigt werden
// @Result: null
//******************************************************************************
function LoadGUI()
   // @VZB@ der nachfolgende Teil wird automatisch gepflegt
   A_AdoptPos              := FindObject(oForm, "A_AdoptPos"),
   A_Cancel                := FindObject(oForm, "A_Cancel"),
   A_Delete                := FindObject(oForm, "A_Delete"),
   A_HelpContent           := FindObject(oForm, "A_HelpContent"),
   a_hilfe                 := FindObject(oForm, "a_hilfe"),
   A_Left                  := FindObject(oForm, "A_Left"),
   A_NewPosFromMasterTable := FindObject(oForm, "A_NewPosFromMasterTable"),
   A_NewPosManual          := FindObject(oForm, "A_NewPosManual"),
   A_Right                 := FindObject(oForm, "A_Right"),
   A_Save                  := FindObject(oForm, "A_Save"),
   AL_Main                 := FindObject(oForm, "AL_Main"),
   beBarButton1            := FindObject(oForm, "beBarButton1"),
   beBarButton2            := FindObject(oForm, "beBarButton2"),
   beBarButton3            := FindObject(oForm, "beBarButton3"),
   beBarButton4            := FindObject(oForm, "beBarButton4"),
   beBarButton5            := FindObject(oForm, "beBarButton5"),
   beBarButton6            := FindObject(oForm, "beBarButton6"),
   beBarDockControl1       := FindObject(oForm, "beBarDockControl1"),
   beGroupPanel1           := FindObject(oForm, "beGroupPanel1"),
   BeSplitter1             := FindObject(oForm, "BeSplitter1"),
   bipnl_Top               := FindObject(oForm, "bipnl_Top"),
   btn_Left                := FindObject(oForm, "btn_Left"),
   btn_Right               := FindObject(oForm, "btn_Right"),
   ds_EVSBSP               := FindObject(oForm, "ds_EVSBSP"),
   ds_Mastertable          := FindObject(oForm, "ds_Mastertable"),
   ds_StuecklisteMemTable  := FindObject(oForm, "ds_StuecklisteMemTable"),
   ds_StuecklisteTable     := FindObject(oForm, "ds_StuecklisteTable"),
   edt_bez                 := FindObject(oForm, "edt_bez"),
   edt_GEWICHT             := FindObject(oForm, "edt_GEWICHT"),
   edt_me                  := FindObject(oForm, "edt_me"),
   edt_Menge               := FindObject(oForm, "edt_Menge"),
   grd_EVSBSP              := FindObject(oForm, "grd_EVSBSP"),
   grd_Mastertable         := FindObject(oForm, "grd_Mastertable"),
   lbl_bez                 := FindObject(oForm, "lbl_bez"),
   lbl_GEWICHT             := FindObject(oForm, "lbl_GEWICHT"),
   lbl_HeadlineEVSBSP      := FindObject(oForm, "lbl_HeadlineEVSBSP"),
   lbl_HeadlineStueli      := FindObject(oForm, "lbl_HeadlineStueli"),
   lbl_ME                  := FindObject(oForm, "lbl_ME"),
   lbl_Menge               := FindObject(oForm, "lbl_Menge"),
   pnl_1                   := FindObject(oForm, "pnl_1"),
   pnl_beistellstueckliste := FindObject(oForm, "pnl_beistellstueckliste"),
   pnl_Bottom              := FindObject(oForm, "pnl_Bottom"),
   pnl_BottomGrids         := FindObject(oForm, "pnl_BottomGrids"),
   pnl_buttons             := FindObject(oForm, "pnl_buttons"),
   pnl_EVSBSP              := FindObject(oForm, "pnl_EVSBSP"),
   pnl_Main                := FindObject(oForm, "pnl_Main"),
   pnl_MainEVSBSP          := FindObject(oForm, "pnl_MainEVSBSP"),
   pnl_Top                 := FindObject(oForm, "pnl_Top"),
   pnl_verf_positionen     := FindObject(oForm, "pnl_verf_positionen"),
   pnl_verfuegbar          := FindObject(oForm, "pnl_verfuegbar"),
   tbar_Manager            := FindObject(oForm, "tbar_Manager"),
   tbar_ManagerBar1        := FindObject(oForm, "tbar_ManagerBar1"),
   // @VZE@ der vorangehende Teil wird automatisch gepflegt

   oForm.OrigCapt    := 'Beistell-Positionen',
   oForm.ImageIndex  := 252,
   btn_Left.Caption  := '',
   btn_Right.Caption := '',
end,

//******************************************************************************
// ShowGUI zeigt das GUI an, das vorher mit LoadGUI geladen werden muss.
// @Result: null
//******************************************************************************
function ShowGUI()
   if empty(m_oOwnerForm) then
      ShowModal(oForm),
   else
      Show(oForm),
   endif,
end,

//##############################################################################
//##############################################################################
// Hauptprogramm
//##############################################################################
//##############################################################################

startseq
   // Für den Tests in der Entwicklungsumgebung ohne übergebener Master-Tabelle
   if EditorMode() and empty(m_oMasterTable) then
//      m_oMasterTable           := DBOpen(waDab210),
//      m_oMasterTable.IndexName := 'DAB211',
//      DBSeek({'BG-RA632SG-D'}, m_oMasterTable),
      m_oMasterTable           := DBOpen(waDab240),
      m_oMasterTable.IndexName := 'DAB245',
      DBSeek({119}, m_oMasterTable),
   endif,
   InitForm(),
   LoadGUI(),
   OpenDataBaseAndLinkToGUI(),
   SetDefaults(),
   ActionsEnabled(),
   if m_bIsExternArt then
      RefreshMainTable(),
   endif,
   ShowGUI(),
onerror
   MessageDlg('Fehler im Programm ' + ProgName() + crlf +
               GetErrorText()  + crlf + crlf +
               'error stack: ' + crlf +
               DebugArr(GetErrorStack(true)), mtError),
   DestroyObject(oForm),
stopseq,

// Programm gibt die Formular-Instanz zurück => wichtig z.B. bei Aufruf per 'Call()'
oForm

//##############################################################################
//##############################################################################
// Beschreibung: Docking zum Auslesen der Status' der Beistellung
//
// Aufruf: Das Fenster sollte innerhalb dem Fenster "Offene Aufträge - Produktion"
//         in den "Auftragspositionen (F3)" aufrufbar sein.
//         GFU_ShowDockingFromMaskIndiMenu('VERSAND_BEISTELLUNG', Self, 'Versand\Erweiterte Versandsteuerung\StatusBeistellung\GUI')
//
// Änderungsdoku
// 001 IN 06.09.18 Vorschlagsmenge geändert
// 002 IN 06.09.18 Aktualisierung des Beistell-Status integriert
//##############################################################################
//##############################################################################

|
   m_oOwnerForm:P1,
   m_cFormRefKey:P2,
   m_oMasterTable:P3,

   m_oDM, m_oMainTable, m_oEVSSDI, m_oDab240,
   m_nMainTableWorkarea, m_cMainTableIndex, m_cMainTableAlias, m_nMasterTableWorkarea,
   m_cFormClassID, m_cWinPosSaveId, m_oMemTable, m_cBrowserID,
   m_nExternleistungsNKStellen, m_nExternleistungsNKStellen_BG,
   m_nSumme_DAB320, m_nSumme_DAB035, m_nMengeInWE, m_nSumme_DAB020,

   // @VDB@ der nachfolgende Teil wird automatisch gepflegt
   oForm, a_DefineSupplier, A_GoToBestellRueckstand, A_GoToDisposition,
   A_GoToSendung, A_HelpContent, A_IndiHelp, A_NewDisposition, a_Refresh,
   actions, BeBarButton1, BeBarButton2, BeBarButton3, BeBarButton4,
   BeBarButton5, BeSplitter1, btn_Help, btn_Refresh, ds_MasterTable,
   ds_MemTable, edt_BestellteMenge, edt_BestellteMenge_Soll,
   edt_DispoVorschlagsMenge, edt_DispoVorschlagsMenge_Soll, edt_ExtLINR,
   edt_GebuchteWE, edt_GebuchteWE_Soll, edt_MengeDispo, edt_MengeDispo_Soll,
   edt_MengeInWE, edt_MengeInWE_Soll, edt_OffeneMenge, edt_OffeneMenge_Soll,
   edt_ProdMenge, edt_ProdMenge_Soll, grd_MemTable, lbl_BestellteMenge,
   lbl_BgEH1, lbl_BgEH2, lbl_BgEH3, lbl_BgEH4, lbl_BgEH5, lbl_BgEH6, lbl_BgEH7,
   lbl_DispoMenge, lbl_DispoVorschlagsMenge, lbl_ExtLINR, lbl_GebuchteWE,
   lbl_LagerEH1, lbl_LagerEH2, lbl_LagerEH3, lbl_LagerEH4, lbl_LagerEH5,
   lbl_LagerEH6, lbl_LagerEH7, lbl_MengeBGEinheit, lbl_MengeBSEinheit,
   lbl_MengeInWE, lbl_OffeneMenge, lbl_ProdMenge, pnl_1, pnl_Browser,
   pnl_Client, pnl_Main, tbar_Bar, tbar_DockControl, tbar_Manager
   // @VDE@ der vorangehende Teil wird automatisch gepflegt
|

//##############################################################################
//##############################################################################
// Konstanten
//##############################################################################
//##############################################################################

m_cFormClassID       := '@VERSTATBS',
m_cWinPosSaveId      := "@VERSTATBS",
m_cBrowserID         := '@BSSTAT',

//##############################################################################
//##############################################################################
// Funktionen
//##############################################################################
//##############################################################################

//******************************************************************************
// Funktion zum Anlegen einer neuen Disposition
// @Result: null
//******************************************************************************
function CreateNewDispo(oDM, cArtNo, nLiefNr, nMenge, nKOMMISS)
|
   oDispoBO, oDispoController, nID1, nID2
|

   oDispoController := CreateObject('TBePurchaseDispositionBusinessController'),
   oDispoBO         := CreateObject('TBePurchaseDispositionBO'),
   result           := 0,

   startseq
      oDispoController.CbDataModule := oDM,
      oDispoBO.CbDataModule         := oDM,
      DbStartTrans(oDM.AdsConnection),
      startseq
         // neue Disposition anlegen
         if oDispoController.CbCreateDisposition(oDispoBO, cArtNo, nMenge, nLiefNr) then
            oDispoBO.CbQuantity := nMenge, // -> berechnet die Menge_EK neu falls eine Umrechnung vorhanden ist
            oDispoBO.CbCommiss  := nKOMMISS,
            oDispoController.CbPostDisposition(oDispoBO),
            result := oDispoBO.CbID,
         endif,
         DbCommit(oDM.AdsConnection),
         // Status für den aktuellen Auftrag aktualisieren
         if not Empty(m_oMastertable:B_POS_LFD) then
            EVS_CalcAllBeistellStatus(oDM,m_oMastertable:B_POS_LFD),
         endif,                                                              
      always
         if DbInTrans(oDM.AdsConnection) then
            DbRollback(oDM.AdsConnection),
         endif,
      stopseq,

   always
      DestroyObject(oDispoBO),
      DestroyObject(oDispoController),
   stopseq,
end,

//******************************************************************************
// Funktion ändert den Inhalt des Feldes DAB240:X_EXT_LINR
// @Result: null
//******************************************************************************
function ChangeExtLINR(oDM, cLINR)
| cB_POS_LFD, nAufNr, nAufPos, nPosNr, nLinr |

   cB_POS_LFD := '',
   nAufNr     := 0,
   nAufPos    := 0,
   nPosNr     := 0,
   nLinr := Val(cLinr),                 writeln(nLinr, m_oMasterTable:X_EXT_LINR),
   if nLINR <> m_oMasterTable:X_EXT_LINR then
      // Transaktion starten und Lieferanten-Nr. in DAB240 speichern
      DbStartTrans(oDM.ADSConnection),
      startseq
         // B_POS_LFD aufgliedern Für Funktion ProdPosEdit()
         cB_POS_LFD := m_oMasterTable:B_POS_LFD,
         nAufNr     := Val(SubStr(cB_POS_LFD, 1, 6)),
         nAufPos    := Val(SubStr(cB_POS_LFD, 7, 2)),
         nPosNr     := Val(SubStr(cB_POS_LFD, 9, 3)),
         ProdPosEdit(oDM, nAufNr, nAufPos, nPosNr),
         m_oDab240:X_EXT_LINR := nLINR,
         ProdPosPost(oDM),
         DbCommit(oDM.ADSConnection),
      always
         if DbInTrans(oDM.ADSConnection) then
            DbRollback(oDM.ADSConnection),
            DbCancelAll(oDM),
         endif,
         DbRefresh(m_oMasterTable),
      stopseq,
      edt_ExtLINR.Text := lookup(waDAB100, 1, {{m_oMasterTable:X_EXT_LINR}}, 'MATCHCODE', ''),
   endif,
end,

//******************************************************************************
// Funktion leert Edits
// @Result: null
//******************************************************************************
function EmptyEdits()
| i, oFieldLag, oFieldBG |
   edt_OffeneMenge.text               := '',
   edt_DispoVorschlagsMenge.text      := '',
   edt_MengeDispo.text                := '',
   edt_BestellteMenge.text            := '',
   edt_MengeInWE.text                 := '',
   edt_GebuchteWE.text                := '',
   edt_ProdMenge.text                 := '',

   edt_OffeneMenge_Soll.text          := '',
   edt_DispoVorschlagsMenge_Soll.text := '',
   edt_MengeDispo_Soll.text           := '',
   edt_BestellteMenge_Soll.text       := '',
   edt_MengeInWE_Soll.text            := '',
   edt_GebuchteWE_Soll.text           := '',
   edt_ProdMenge_Soll.text            := '',

   edt_ExtLINR.text                   := '',

    for i := 1 to 7 do
       oFieldLag         := FindObject(oForm, "lbl_LagerEH" + Str(i)),
       oFieldLag.Caption := '',
       oFieldBG          := FindObject(oForm, "lbl_BgEH" + Str(i)),
       oFieldBG.Caption  := '',
    end,
end,

//******************************************************************************
// Funktion füllt alle Edits auf der Maske und errechnet die Dispo-Vorschlags-Menge
// @Result: null
//******************************************************************************
function FillEdits()
|
   nExternLeistungsME, nExternLeistungsME_BG, nOffeneMenge, nDispoVorschlagsMenge,
   i, oFieldLag, oFieldBG, oDAB240_Calc, nBereitMenge, nIST
|

   nExternLeistungsME             := lookup(waDAB010, 'DAB011', {{m_oMasterTable:ARTNR_E}}, 'AllTrim(ME)', '?'),
   m_nExternleistungsNKStellen    := lookup(waDAB010, 'DAB011', {{m_oMasterTable:ARTNR_E}}, 'NKSTELLEN',     0),
   nExternLeistungsME_BG          := lookup(waDAB010, 'DAB011', {{m_oMasterTable:ARTNR1}},  'AllTrim(ME)', '?'),
   m_nExternleistungsNKStellen_BG := lookup(waDAB010, 'DAB011', {{m_oMasterTable:ARTNR1}},  'NKSTELLEN',     0),

   // Offene Menge errechnen
   nOffeneMenge := Max(m_oMasterTable:RUECKS_PR - m_nSumme_DAB035 - m_nSumme_DAB320, 0),

   // Dispo-Vorschlags-Menge errechnen
   nBereitMenge := 0,
   oDAB240_Calc := BeOpen(waDAB240, 'DAB241'),
   startseq
      DBSeek({m_oMasterTable:B_POS_LFD}, oDAB240_Calc),
      While left(m_oMasterTable:B_POS_LFD, 9) == left(oDAB240_Calc:B_POS_LFD, 9) and not BoF(oDAB240_Calc) do
         if oDAB240_Calc:R_S = 'S' and lookup(waDAB010, 'DAB011', {{oDAB240_Calc:ARTNR_E}}, 'ARTTYP', '?') = 'A' then
            nBereitMenge := oDAB240_Calc:MENGE,
            break,
         endif,
         Skip(-1, oDAB240_Calc),
      end,
   always
      BeClose(oDAB240_Calc),
   stopseq,
   nIST := m_oMasterTable:IST,
   nDispoVorschlagsMenge := (nBereitMenge - (nIST + m_nSumme_DAB035 + m_nSumme_DAB320) / m_oMasterTable:SOLL) * m_oMasterTable:SOLL,

   edt_OffeneMenge.text               := FormatStd(nOffeneMenge,                  m_nExternleistungsNKStellen),
   edt_DispoVorschlagsMenge.text      := FormatStd(Max(nDispoVorschlagsMenge, 0), m_nExternleistungsNKStellen),
   edt_MengeDispo.text                := FormatStd(m_nSumme_DAB320,               m_nExternleistungsNKStellen),
   edt_BestellteMenge.text            := FormatStd(m_nSumme_DAB035,               m_nExternleistungsNKStellen),
   edt_MengeInWE.text                 := FormatStd(m_nMengeInWE,                  m_nExternleistungsNKStellen),
   edt_GebuchteWE.text                := FormatStd(m_nSumme_DAB020,               m_nExternleistungsNKStellen),
   edt_ProdMenge.text                 := FormatStd(nIST,                          m_nExternleistungsNKStellen),

   edt_OffeneMenge_Soll.text          := FormatStd(nOffeneMenge                  / m_oMasterTable:SOLL, m_nExternleistungsNKStellen_BG),
   edt_DispoVorschlagsMenge_Soll.text := FormatStd(Max(nDispoVorschlagsMenge, 0) / m_oMasterTable:SOLL, m_nExternleistungsNKStellen_BG),
   edt_MengeDispo_Soll.text           := FormatStd(m_nSumme_DAB320               / m_oMasterTable:SOLL, m_nExternleistungsNKStellen_BG),
   edt_BestellteMenge_Soll.text       := FormatStd(m_nSumme_DAB035               / m_oMasterTable:SOLL, m_nExternleistungsNKStellen_BG),
   edt_MengeInWE_Soll.text            := FormatStd(m_nMengeInWE                  / m_oMasterTable:SOLL, m_nExternleistungsNKStellen_BG),
   edt_GebuchteWE_Soll.text           := FormatStd(m_nSumme_DAB020               / m_oMasterTable:SOLL, m_nExternleistungsNKStellen_BG),
   edt_ProdMenge_Soll.text            := FormatStd(nIST                          / m_oMasterTable:SOLL, m_nExternleistungsNKStellen_BG),

   // Lieferanten-Edit füllen
   edt_ExtLINR.Text := lookup(waDAB100, 1, {{m_oMasterTable:X_EXT_LINR}}, 'MATCHCODE', ''),

   for i := 1 to 7 do
      oFieldLag         := FindObject(oForm, "lbl_LagerEH" + Str(i)),
      oFieldLag.Caption := nExternLeistungsME,
      oFieldBG          := FindObject(oForm, "lbl_BgEH" + Str(i)),
      oFieldBG.Caption  := nExternLeistungsME_BG,
   end,

   // An der GUI darauf hinweisen, wenn die Summe der 'E'-Buchungen nicht mit der Summe der 'P'-Buchungen übereinstimmt.
   // => Das deutet auf eine "Ausnahmesituation" hin (Eingabe-Fehler, Korrektur-Buchung, ...)
   GU_SetallControlColors(edt_ProdMenge,      iif(m_nSumme_DAB020 <> m_oMasterTable:IST, GetBeDesignColor(dcbOrange, dcgLevel2), clNone)),
   GU_SetallControlColors(edt_ProdMenge_Soll, iif(m_nSumme_DAB020 <> m_oMasterTable:IST, GetBeDesignColor(dcbOrange, dcgLevel2), clNone)),
end,

//******************************************************************************
// MemTable leeren
// @Result: null
//******************************************************************************
function EmptyMemTable()
   if not empty(m_oMemTable) then
      m_oMemTable.CbDisableControls(),
      startseq
         m_oMemTable.CbEmptyTable(),
      always
         m_oMemTable.CbEnableControls(),
      stopseq,
   endif,
end,

//******************************************************************************
// MemTable füllen, wenn auf Extern-Artikel positioniert
// @Result: null
//******************************************************************************
function FillMemTable()

   if not empty(m_oMemTable) then
      DBDisableControls(m_oMemTable), //.CbDisableControls(),
      startseq
         m_oMemTable.CbEmptyTable(),
         EVS_Beistell_Status_DAB320(        m_oDM, m_oMemTable, m_oMasterTable:ARTNR_E, m_oMasterTable:B_POS_LFD),
         EVS_Beistell_Status_DAB035_Versand(m_oDM, m_oMemTable, m_oMasterTable:ARTNR_E, m_oMasterTable:B_POS_LFD),
         EVS_Beistell_Status_DAB020(        m_oDM, m_oMemTable, m_oMasterTable:ARTNR_E, m_oMasterTable:B_POS_LFD),
        // MemTable-Werte summieren
         m_nSumme_DAB320 := 0,
         m_nSumme_DAB035 := 0,
         m_nMengeInWE    := 0,
         m_nSumme_DAB020 := 0,
         m_oMemTable.CbFirst(),
         while not m_oMemTable.CbEoF do
            case m_oMemTable:STATUS
               of 10               :: m_nSumme_DAB320 += m_oMemTable:MENGE,
               of 20               :: m_nSumme_DAB035 += m_oMemTable:MENGE,
               of 30               :: m_nSumme_DAB035 += m_oMemTable:MENGE,
               of 40               :: m_nSumme_DAB035 += m_oMemTable:MENGE,
               of 50               :: m_nSumme_DAB035 += m_oMemTable:MENGE,
                                      m_nMengeInWE    += m_oMemTable:MENGE_WE,
               of 60               :: m_nSumme_DAB020 += m_oMemTable:MENGE,
               otherwise
            endcase,
            // MemTable füllen mit Menge_BG und ARTNR_BG
            m_oMemTable.CbEdit(),
            m_oMemTable:MENGE_BG := m_oMemTable:MENGE / m_oMasterTable:SOLL,
            m_oMemTable:ARTNR_BG := m_oMasterTable:ARTNR1,
            m_oMemTable.CbPost(),
            m_oMemTable.CbNext(),

         end,
      always
         DBEnableControls(m_oMemTable), //.CbEnableControls(),
      stopseq,
   endif,
end,

//******************************************************************************
// Zentrale Steuerung des "Enabled-Zustand" aller Actions
//******************************************************************************
function ActionsEnabled()
| bDispo, bBestellung, bSendung, bExtArt |
   bDispo      := not empty(m_oMemTable:DAB320_ID),
   bBestellung := not empty(m_oMemTable:DAB035_ID),
   bSendung    := not empty(m_oMemTable:EVSKOPF_ID),
   bExtArt     := Lookup(waDAB010, 'DAB011', {{m_oMasterTable:ARTNR_E}}, 'ARTTYP') = 'E',

   A_GoToDisposition.Enabled       := bDispo,
   A_GoToBestellRueckstand.Enabled := bBestellung,
   A_GoToSendung.Enabled           := bSendung,
   A_NewDisposition.Enabled        := bExtArt,
   A_DefineSupplier.Enabled        := bExtArt,
end,

//******************************************************************************
// Eigenes Datenmodul erstellen, benötigte Tabellen öffnen und mit GUI verbinden
//******************************************************************************
function OpenDataBaseAndLinkToGUI()
   // Lokales DataSource mit der übergebenen Master-Tabelle verbinden,
   // damit eine (eigene, lokale) Komponente mit den notwendigen Events zur
   // Reaktion auf Master-Table-Aktionen bereit steht
   // eigenes Datenmodul erstellen
   m_oDM                        := CreateObject('TBeDbGet', 'DataModule', oForm),
   m_oDab240                    := DBGetTable(m_oDM, waDAB240),
   m_nMasterTableWorkarea       := m_oMasterTable.Workarea,
   GFU_Docking_LinkMasterTableToLocalDataSource(
      m_oMasterTable,
      ds_MasterTable,
      m_nMasterTableWorkarea,
      'TBeRightsTable'
   ),
   // MemTable erzeugen und mit Data Source verknüpfen
   m_oMemTable                  := EVS_Beistell_Status_NewMem(m_oDM),

   // Datasource
   ds_MemTable.DataSet          := m_oMemTable,

   // Tabelle mit Browser verbinden
   grd_MemTable.DataSource                    := ds_MemTable,     // DataSource zuweisen
   grd_MemTable.useonlyregistereddatasets     := true,
   grd_MemTable.ID                            := m_cBrowserID,     // Browser-ID zuweisen
   grd_MemTable.ReadWriteProps                := False,
end,

//##############################################################################
//##############################################################################
// Eventhandler
//##############################################################################
//##############################################################################

//******************************************************************************
//
//******************************************************************************
function edt_MengeInWE_SollChange( Sender )

end,

//******************************************************************************
// Event: Wenn Edit "edt_DispoVorschlagsMenge" verlassen wird, Formatierung
//        des Inhalts durchführen
//******************************************************************************
function edt_DispoVorschlagsMengeExit( Sender )
   startseq
      if not empty(edt_DispoVorschlagsMenge.text) then
         edt_DispoVorschlagsMenge.text      := FormatStd(Max(edt_DispoVorschlagsMenge.text, 0), m_nExternleistungsNKStellen),
         edt_DispoVorschlagsMenge_Soll.text := FormatStd(edt_DispoVorschlagsMenge.text / e2v(m_oMasterTable:SOLL,1), m_nExternleistungsNKStellen_BG),
      endif,
   onerror
      GU_ShowStdErrorMessage('Fehler im Event: edt_DispoVorschlagsMengeExit', GetErrorObj()),
   stopseq,
end,

//******************************************************************************
// Event: Scroll auf der Memtable
//******************************************************************************
function ds_MemTableScroll_Update( Sender )
   startseq
      ActionsEnabled(),
   onerror
      GU_ShowStdErrorMessage('Fehler im Event: ds_MemTableScroll_Update', GetErrorObj()),
   stopseq,
end,

//******************************************************************************
// Event: Scroll-Update auf MasterTable
//******************************************************************************
function ds_MasterTableScroll_Update( Sender )
| cMasterTable_ID |
   startseq
      if cMasterTable_ID <> m_oMasterTable:ID then
         if Lookup(waDAB010, 'DAB011', {{m_oMasterTable:ARTNR_E}}, 'ARTTYP') = 'E' then
            FillMemTable(),
            FillEdits(),
         else,
            EmptyEdits(),
            EmptyMemTable(),
         endif,
         if not empty(m_oMemTable) then
            ActionsEnabled(),
         endif,
      endif,
      cMasterTable_ID := m_oMasterTable:ID,
   onerror
      GU_ShowStdErrorMessage('Fehler im Event: ds_MasterTableScroll_Update', GetErrorObj()),
   stopseq,
end,

//******************************************************************************
// Event: Beim Zerstören des Formulars
//******************************************************************************
function FormExDestroy( Sender )
   GFU_DockingForm_Destroyed(oForm, m_cFormRefKey),
end,

//******************************************************************************
// Event: Abfrage, ob Fenster geschlossen werden kann
//******************************************************************************
function FormExCloseQuery( Sender, bCanClose )
end,

//******************************************************************************
// Event: Beim Schließen des Formulars
//******************************************************************************
function FormExClose( Sender, Action)
  Action := caFree, // = Form zerstören
end,

//##############################################################################
//##############################################################################
// Actionhandler
//##############################################################################
//##############################################################################

//******************************************************************************
// Action: Öffnet ein Modales Fenster in dem ein Lieferant ausgewählt wird.
//         Der ausgewählte Liferant wird in das Feld DAB240:X_EXT_LINR geschrieben
//******************************************************************************
function a_DefineSupplierExecute( Sender )
| cLINR |
   startseq
      cLINR := Call('beistellungen\StatusBeistellung\Lieferanten-Wahl', m_oMasterTable:ARTNR_E, m_oMasterTable:X_EXT_LINR),
      ChangeExtLINR(m_oDM, cLINR),
   onerror
       GU_ShowStdErrorMessage('Fehler beim Setzen des Lieferanten', GetErrorObj()),
   stopseq,
end,

//******************************************************************************
// Action: Refresh die MemTable
//******************************************************************************
function a_RefreshExecute( Sender )
   startseq
      EmptyMemTable(),
      FillMemTable(),
      EmptyEdits(),
      FillEdits(),
      DbGoTop(m_oMemTable),
      ActionsEnabled(),
   onerror
      GU_ShowStdErrorMessage('Fehler beim Aktualisieren der Tabelle.', GetErrorObj()),
   stopseq,
end,

//******************************************************************************
// Action: Individuelle Online-Hilfe öffnen
//******************************************************************************
function A_HelpExecute( Sender )
   startseq
      IOHU_ShowOnlineHelpGui(gl_EVS_BSP_IndiOnlineHelp_SQLWhere),
   onerror
      GU_ShowStdErrorMessage('Fehler beim Öffnen der individuellen Online-Hilfe.', GetErrorObj()),
   stopseq,
end,

//******************************************************************************
// Action: Auf Sendungs-Datensatz springen (EVSKOPF)
//******************************************************************************
function A_GoToSendungExecute( Sender )
   startseq
      EVS_GUI_ShowErweiterteVersandsteuerungAsMdiChild({{'EVSKOPF_ID', m_oMemTable:EVSKOPF_ID}}),
   onerror
      GU_ShowStdErrorMessage('Fehler beim Springen in Sendung.', GetErrorObj()),
   stopseq,
end,

//******************************************************************************
// Action: Auf Dispositions-Datensatz springen (DAB320)
//******************************************************************************
function A_GoToDispositionExecute( Sender )
   startseq
      GU_ShowBeWindow_Dab320(m_oMemTable:LIEFNR, 'ID', m_oMemTable:DAB320_ID),
   onerror
      GU_ShowStdErrorMessage('Fehler beim Springen in Dispositions-Datensatz.', GetErrorObj()),
   stopseq,
end,

//******************************************************************************
// Action: Auf Bestellungs-Datensatz springen (DAB035)
//******************************************************************************
function A_GoToBestellRueckstandExecute( Sender )
   startseq
      GU_ShowBeWindow_Dab035_Einkauf(m_oMemTable:LIEFNR, 'ID', m_oMemTable:DAB035_ID),
   onerror
      GU_ShowStdErrorMessage('Fehler beim Springen in Bestell-Rückstand.', GetErrorObj()),
   stopseq,
end,

//******************************************************************************
// Action: Neue Disposition anlegen (DAB320)
//******************************************************************************
function A_NewDispositionExecute( Sender )
| nLiefNr, nLiefID, nMenge, nKOMMISS, nID, nOldIndex |
   startseq
      nMenge := StrToFloat(strtran(edt_DispoVorschlagsMenge.text,'.','')),
      nMenge := iif(nMenge > 0, nMenge, edt_OffeneMenge.text),                  // 001 offene Menge statt 1
      nMenge := iif(nMenge > 0, nMenge, 1),
      if not empty(edt_DispoVorschlagsMenge.text) and jn('Eine neue Disposition mit Menge <' + Str(nMenge) + '> anlegen?') then
         nLiefID := EKU_Dab510_GetMainSupplierConditionID(m_oMasterTable:ARTNR_E, date()),
         nLiefNr := iif(empty(m_oMasterTable:X_EXT_LINR), lookup(waDAB510, 'DAB515', {{nLiefID}}, 'LINR'), m_oMasterTable:X_EXT_LINR),

         nKOMMISS := EVS_B_POS_LFD_2_KOMMISS(m_oMasterTable:B_POS_LFD),

         // Lieferanten-Nr. in DAB240:X_LIEFNR schreiben, falls  noch nicht vorhanden
         ChangeExtLINR(m_oDM, nLiefNr),

         // Anlegen der Position
         nID := CreateNewDispo(m_oDM, m_oMasterTable:ARTNR_E, nLiefNr, nMenge, nKOMMISS),
         FillMemTable(),
         FillEdits(),

         nOldIndex := m_oMemTable.CbIndexName,
         startseq
            m_oMemTable.CbIndexName := 'DAB320_ID',
            m_oMemTable.CbFindKey({nID}),
         always
            m_oMemTable.CbIndexName := nOldIndex,
         stopseq,
      else
         MyFocusControl(oForm, edt_DispoVorschlagsMenge),
      endif,
   onerror
      GU_ShowStdErrorMessage('Fehler beim Anlegen der neuen Disposition.', GetErrorObj()),
   stopseq,
end,

//##############################################################################
//##############################################################################
// Oberflächen-Funktionen
//##############################################################################
//##############################################################################

//******************************************************************************
// InitForm lädt das Formular in Abhängigkeit des Owners
// @Result: null
//******************************************************************************
function InitForm()
   if Empty(m_oOwnerForm) then
      oForm             := LoadForm(m_cFormClassID, Application),
   else
      oForm             := LoadForm(m_cFormClassID, m_oOwnerForm),
      oForm.BorderStyle := bsSizeToolWin, // notwendig für Dockbarkeit
   endif,
   oForm.FormStyle      := fsNormal,
   oForm.PositionSaveID := m_cWinPosSaveId,
   oForm.Name           := GFU_CalcFormularName(m_cFormRefKey, oForm, m_oOwnerForm), // Eindeutiger Formular-Name für Docking-Logik

   // Events zuweisen
   // - Wird hier per Code gemacht, damit man es beim Kopieren der Vorlage nicht
   //   per Designer vergisst.
   AssignEvent(oForm, 'OnClose',      'FormExClose'),
   AssignEvent(oForm, 'OnDestroy',    'FormExDestroy'),
end,

//******************************************************************************
// LoadGUI lädt sämtliche Komponenten die für die Oberfläche benötigt werden
// @Result: null
//******************************************************************************
function LoadGUI()
   // @VZB@ der nachfolgende Teil wird automatisch gepflegt
   a_DefineSupplier              := FindObject(oForm, "a_DefineSupplier"),
   A_GoToBestellRueckstand       := FindObject(oForm, "A_GoToBestellRueckstand"),
   A_GoToDisposition             := FindObject(oForm, "A_GoToDisposition"),
   A_GoToSendung                 := FindObject(oForm, "A_GoToSendung"),
   A_HelpContent                 := FindObject(oForm, "A_HelpContent"),
   A_IndiHelp                    := FindObject(oForm, "A_IndiHelp"),
   A_NewDisposition              := FindObject(oForm, "A_NewDisposition"),
   a_Refresh                     := FindObject(oForm, "a_Refresh"),
   actions                       := FindObject(oForm, "actions"),
   BeBarButton1                  := FindObject(oForm, "BeBarButton1"),
   BeBarButton2                  := FindObject(oForm, "BeBarButton2"),
   BeBarButton3                  := FindObject(oForm, "BeBarButton3"),
   BeBarButton4                  := FindObject(oForm, "BeBarButton4"),
   BeBarButton5                  := FindObject(oForm, "BeBarButton5"),
   BeSplitter1                   := FindObject(oForm, "BeSplitter1"),
   btn_Help                      := FindObject(oForm, "btn_Help"),
   btn_Refresh                   := FindObject(oForm, "btn_Refresh"),
   ds_MasterTable                := FindObject(oForm, "ds_MasterTable"),
   ds_MemTable                   := FindObject(oForm, "ds_MemTable"),
   edt_BestellteMenge            := FindObject(oForm, "edt_BestellteMenge"),
   edt_BestellteMenge_Soll       := FindObject(oForm, "edt_BestellteMenge_Soll"),
   edt_DispoVorschlagsMenge      := FindObject(oForm, "edt_DispoVorschlagsMenge"),
   edt_DispoVorschlagsMenge_Soll := FindObject(oForm, "edt_DispoVorschlagsMenge_Soll"),
   edt_ExtLINR                   := FindObject(oForm, "edt_ExtLINR"),
   edt_GebuchteWE                := FindObject(oForm, "edt_GebuchteWE"),
   edt_GebuchteWE_Soll           := FindObject(oForm, "edt_GebuchteWE_Soll"),
   edt_MengeDispo                := FindObject(oForm, "edt_MengeDispo"),
   edt_MengeDispo_Soll           := FindObject(oForm, "edt_MengeDispo_Soll"),
   edt_MengeInWE                 := FindObject(oForm, "edt_MengeInWE"),
   edt_MengeInWE_Soll            := FindObject(oForm, "edt_MengeInWE_Soll"),
   edt_OffeneMenge               := FindObject(oForm, "edt_OffeneMenge"),
   edt_OffeneMenge_Soll          := FindObject(oForm, "edt_OffeneMenge_Soll"),
   edt_ProdMenge                 := FindObject(oForm, "edt_ProdMenge"),
   edt_ProdMenge_Soll            := FindObject(oForm, "edt_ProdMenge_Soll"),
   grd_MemTable                  := FindObject(oForm, "grd_MemTable"),
   lbl_BestellteMenge            := FindObject(oForm, "lbl_BestellteMenge"),
   lbl_BgEH1                     := FindObject(oForm, "lbl_BgEH1"),
   lbl_BgEH2                     := FindObject(oForm, "lbl_BgEH2"),
   lbl_BgEH3                     := FindObject(oForm, "lbl_BgEH3"),
   lbl_BgEH4                     := FindObject(oForm, "lbl_BgEH4"),
   lbl_BgEH5                     := FindObject(oForm, "lbl_BgEH5"),
   lbl_BgEH6                     := FindObject(oForm, "lbl_BgEH6"),
   lbl_BgEH7                     := FindObject(oForm, "lbl_BgEH7"),
   lbl_DispoMenge                := FindObject(oForm, "lbl_DispoMenge"),
   lbl_DispoVorschlagsMenge      := FindObject(oForm, "lbl_DispoVorschlagsMenge"),
   lbl_ExtLINR                   := FindObject(oForm, "lbl_ExtLINR"),
   lbl_GebuchteWE                := FindObject(oForm, "lbl_GebuchteWE"),
   lbl_LagerEH1                  := FindObject(oForm, "lbl_LagerEH1"),
   lbl_LagerEH2                  := FindObject(oForm, "lbl_LagerEH2"),
   lbl_LagerEH3                  := FindObject(oForm, "lbl_LagerEH3"),
   lbl_LagerEH4                  := FindObject(oForm, "lbl_LagerEH4"),
   lbl_LagerEH5                  := FindObject(oForm, "lbl_LagerEH5"),
   lbl_LagerEH6                  := FindObject(oForm, "lbl_LagerEH6"),
   lbl_LagerEH7                  := FindObject(oForm, "lbl_LagerEH7"),
   lbl_MengeBGEinheit            := FindObject(oForm, "lbl_MengeBGEinheit"),
   lbl_MengeBSEinheit            := FindObject(oForm, "lbl_MengeBSEinheit"),
   lbl_MengeInWE                 := FindObject(oForm, "lbl_MengeInWE"),
   lbl_OffeneMenge               := FindObject(oForm, "lbl_OffeneMenge"),
   lbl_ProdMenge                 := FindObject(oForm, "lbl_ProdMenge"),
   pnl_1                         := FindObject(oForm, "pnl_1"),
   pnl_Browser                   := FindObject(oForm, "pnl_Browser"),
   pnl_Client                    := FindObject(oForm, "pnl_Client"),
   pnl_Main                      := FindObject(oForm, "pnl_Main"),
   tbar_Bar                      := FindObject(oForm, "tbar_Bar"),
   tbar_DockControl              := FindObject(oForm, "tbar_DockControl"),
   tbar_Manager                  := FindObject(oForm, "tbar_Manager"),
   // @VZE@ der vorangehende Teil wird automatisch gepflegt
end,

//******************************************************************************
// Standardeinstellungen setzen
// @Result: null
//******************************************************************************
function SetDefaults()
   oForm.OrigCapt   := 'Status der Beistellung',
   oForm.ImageIndex := 252,
end,

//******************************************************************************
// ShowGUI zeigt das GUI an, das vorher mit LoadGUI geladen werden muss.
// @Result: null
//******************************************************************************
function ShowGUI()
   if Empty(m_oOwnerForm) then
      ShowModal(oForm),
   else
      Show(oForm),
   endif,
end,

//##############################################################################
//##############################################################################
// Hauptprogramm
//##############################################################################
//##############################################################################

startseq,
   // Für den Tests in der Entwicklungsumgebung ohne übergebener Master-Tabelle
   if EditorMode() and Empty(m_oMasterTable) then
      m_oMasterTable           := DbOpen(waDAB240),
      m_oMasterTable.IndexName := 'DAB245',
      DbSeek({119}, m_oMasterTable),   // 544
   endif,
   InitForm(),
   LoadGUI(),
   OpenDataBaseAndLinkToGUI(),
   FillMemTable(),
   FillEdits(),
   SetDefaults(),
   ActionsEnabled(),
   ShowGUI(),
onerror
   GU_ShowStdErrorMessage('Fehler im Programm ' + ProgName(), GetErrorObj()),
   DestroyObject(oForm),
stopseq,

oForm

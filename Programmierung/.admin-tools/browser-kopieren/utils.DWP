//##############################################################################
//##############################################################################
// Utils zum Kopieren von Browser
//##############################################################################
//##############################################################################

function CopyBrowser(oDM, cBrowser, cSource, cTargets, bChangeDabSPR, bQuiet)
| 
   oUserTable, oDabBRO, oDABBRO_Lookup, oDABSPR, oDABSPR_Lookup,
   i, cTargetUser
|

   function UserListToString(oTable)
      Result := '',
      oTable.CbFirst(),
      while not oTable.CbEoF do
         if oTable:C_USER_NR <> cSource then
            Result += '/' + oTable:C_USER_NR,
         endif,
         oTable.CbNext(),
      end,
      if Result <> '' then
         Result += '/',
      endif,
   end,

   function CreateUserTable()
      | oUserInformation |

      oUserInformation  := CreateObject('TBeCbUserInformation'),
      Result            := CreateObject('TBeMemTable'),
      startseq
         oUserInformation.CbInitMemTable(Result),
         oUserInformation.CbUserInformationsToMemTable(Result, True, True, True, False, False, True),
      always
         DestroyObject(oUserInformation),
      stopseq,
   end,

   function Create_Lookup_Browser()
      Result := BeOpen(waDabBRO, 'BROWSER_ID'),

      if not DBSeek({cBrowser, Val(cSource)}, Result) then
         if bQuiet then
            SetError('Browserdaten konnten nicht in Quelltabelle ermittelt werden .'),
         else
            MessageDlg('Browserdaten konnten nicht in Quelltabelle ermittelt werden.'),
            BeClose(Result),
            Result := nil,
         endif,
      endif,
   end,

   function ChangeDABBRO(nTargetUsr)
      SuspendEx(oDABBRO, True),
      startseq
         writeln("Ersetze Browser von "+str(nTargetUsr)),
         if not DBSeek({cBrowser, nTargetUsr}, oDABBRO) then
            DBAppend(oDABBRO),
            oDABBRO.RecAsArray := oDABBRO_Lookup.RecAsArray,
            oDABBRO:USER       := nTargetUsr,
         else,
            DBEdit(oDABBRO),
            oDABBRO:DATA     := oDABBRO_Lookup:DATA,
            oDABBRO:DATA_OLD := oDABBRO_Lookup:DATA_OLD,
         endif,
         DBPost(oDABBRO),
      onerror
         if bQuiet then
            SetError("Fehler beim Ändern des Browsers für User: " + nTargetUsr + crlf + GetErrorText()),
         else
            MessageDlg("Fehler beim Ändern des Browsers für User: " + nTargetUsr + crlf + GetErrorText()),
         endif,
      stopseq,
      SuspendEx(oDABBRO, False),
   end,

   function ChangeDABSPR(cTargetUser)
   | cKey, i |
      SuspendEx(oDABSPR, True),
      for i := 1 to 10 do
         DBScope({"Grid" + PadR(cBrowser, 10) + cSource + "." + StrZero(i, 3)},
               {"Grid" + PadR(cBrowser, 10) + cSource + "." + StrZero(i, 3)},
               oDABSPR_Lookup),

         DBGoTop(oDABSPR_Lookup),
         while not EoF(oDABSPR_Lookup) do
            cKey := "Grid" + PadR(cBrowser, 10) + cTargetUser + "." + StrZero(i, 3),
            startseq
               if not DBSeek({cKey}, oDABSPR) then
                  DBAppend(oDABSPR),
                  oDABSPR:KEY  := cKey,
               else,
                  DBEdit(oDABSPR),
               endif,

               oDABSPR:DATA := oDABSPR_Lookup:DATA,
               DBPost(oDABSPR),
            onerror
               if bQuiet then
                  SetError("Fehler beim Kopieren der Sprachdaten für User: " +
                              cTargetUser + crlf + GetErrorText())
               else
                  MessageDlg("Fehler beim Kopieren der Sprachdaten für User: " +
                              cTargetUser + crlf + GetErrorText()),
               endif,
            stopseq,
            DBSkip(1, oDABSPR_Lookup),
         end,
      next,
      SuspendEx(oDABSPR, False),
   end,
  
//begin
   if not oDM.CbTransaction_Active() then
      SetError('CopyBrowser: Datenmodul ist nicht in einer Transaktion.'),
   endif,
      
   startseq
      if not bQuiet then
         ProgressbarShow(, "Browser kopieren", False),
      endif,

      oUserTable        := CreateUserTable(),
      oDABBRO           := MyGetTable(oDM, waDABBRO, 'COPYBROWSERDABBRO'),
      oDABBRO.IndexName := 'BROWSER_ID',
      oDABBRO_Lookup    := Create_Lookup_Browser(),
      oDABSPR           := MyGetTable(oDM, waDABSPR, 'COPYBROWSERDABSPR'),
      oDABSPR.IndexName := 'DABSPR',
      oDABSPR_Lookup    := BeOpen(waDABSPR, 'DABSPR'),

      if oDABBRO_Lookup <> nil then
         if Empty(cTargets) or '000' $ cTargets then
            cTargets := UserListToString(oUserTable)
         endif,

         for i := 2 to TokenCount(cTargets, '/') - 1 do
            cTargetUser := StrToken(cTargets, '/', i),
            if cTargetUser <> cSource then
               if not bQuiet then
                  ProgressbarUpdate(, 'Kopiere Browser für User: ' + cTargetUser, True),
               endif,

               ChangeDABBRO(cTargetUser),

               if bChangeDabSPR then
                  ChangeDABSPR(cTargetUser),
               endif,
            endif,
         next,
         if not bQuiet then
            MessageDlg("Browser für alle User kopiert"),
         endif,
      endif,
   always
      BeClose(oDABSPR_Lookup),
      DestroyObject(oDABSPR),
      BeClose(oDABBRO_Lookup),
      DestroyObject(oDABBRO),
      DestroyObject(oUserTable),
      if not bQuiet then
         ProgressbarHide(),
      endif,
   stopseq,
end,
